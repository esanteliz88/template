generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  loginAttempts LoginAttempt[] @relation("UserLoginAttempts")
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  type        String
  priceUSD    Float
  priceCLP    Float
  priceBRL    Float
  stock       Int
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  detalleVenta DetalleVenta[]
}

model LoginAttempt {
  id           Int       @id @default(autoincrement())
  ip           String
  email        String
  attempts     Int       @default(0)
  blockedUntil DateTime?
  lastAttempt  DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  userId       String
  user         User      @relation("UserLoginAttempts", fields: [userId], references: [id])

  @@unique([ip, email])
  @@index([email])
  @@index([ip])
  @@index([userId])
}

model Venta {
  id                String    @id @default(uuid())
  idVenta          String    @unique
  tipoTransaccion  String    // "Arriendo" o "Devolucion"
  estadoVenta      String    // "Finalizada" o "Parcial"
  fecha            DateTime
  tipoMoneda       String
  medioPago        String
  total            Float
  vuelto           Float?
  idCliente        String
  nombreCliente    String
  email            String
  telefono         String
  dni              String
  idVendedor       String
  idVentaRelacionada String?
  ventaRelacionada Venta?    @relation("VentasRelacionadas", fields: [idVentaRelacionada], references: [idVenta], onDelete: NoAction, onUpdate: NoAction)
  ventasDevolucion Venta[]   @relation("VentasRelacionadas")
  datosArriendo    DatosArriendo?
  detalleVenta     DetalleVenta[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([idCliente])
  @@index([idVendedor])
  @@index([fecha])
}

model DatosArriendo {
  id            String   @id @default(uuid())
  fechaArriendo DateTime
  fechaEntrega  DateTime
  patente       String
  ventaId       String   @unique
  venta         Venta    @relation(fields: [ventaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model DetalleVenta {
  id                  String   @id @default(uuid())
  idDetalle           Int
  idProducto          String
  producto            Product  @relation(fields: [idProducto], references: [id])
  descripcionProducto String
  precioUnitario     Float
  cantidad           Int
  precioTotal        Float
  cantidadDevuelta   Int?
  estadoProducto     String?
  observacion        String?
  ventaId            String
  venta              Venta    @relation(fields: [ventaId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  detalleOriginalId  String?
  detalleOriginal    DetalleVenta?  @relation("DetalleDevolucion", fields: [detalleOriginalId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  detallesDevoluciones DetalleVenta[] @relation("DetalleDevolucion")

  @@unique([ventaId, idDetalle])
  @@index([idProducto])
  @@index([detalleOriginalId])
} 