
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model LoginAttempt
 * 
 */
export type LoginAttempt = $Result.DefaultSelection<Prisma.$LoginAttemptPayload>
/**
 * Model Venta
 * 
 */
export type Venta = $Result.DefaultSelection<Prisma.$VentaPayload>
/**
 * Model DatosArriendo
 * 
 */
export type DatosArriendo = $Result.DefaultSelection<Prisma.$DatosArriendoPayload>
/**
 * Model DetalleVenta
 * 
 */
export type DetalleVenta = $Result.DefaultSelection<Prisma.$DetalleVentaPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.loginAttempt`: Exposes CRUD operations for the **LoginAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoginAttempts
    * const loginAttempts = await prisma.loginAttempt.findMany()
    * ```
    */
  get loginAttempt(): Prisma.LoginAttemptDelegate<ExtArgs>;

  /**
   * `prisma.venta`: Exposes CRUD operations for the **Venta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ventas
    * const ventas = await prisma.venta.findMany()
    * ```
    */
  get venta(): Prisma.VentaDelegate<ExtArgs>;

  /**
   * `prisma.datosArriendo`: Exposes CRUD operations for the **DatosArriendo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DatosArriendos
    * const datosArriendos = await prisma.datosArriendo.findMany()
    * ```
    */
  get datosArriendo(): Prisma.DatosArriendoDelegate<ExtArgs>;

  /**
   * `prisma.detalleVenta`: Exposes CRUD operations for the **DetalleVenta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DetalleVentas
    * const detalleVentas = await prisma.detalleVenta.findMany()
    * ```
    */
  get detalleVenta(): Prisma.DetalleVentaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Product: 'Product',
    LoginAttempt: 'LoginAttempt',
    Venta: 'Venta',
    DatosArriendo: 'DatosArriendo',
    DetalleVenta: 'DetalleVenta'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "product" | "loginAttempt" | "venta" | "datosArriendo" | "detalleVenta"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      LoginAttempt: {
        payload: Prisma.$LoginAttemptPayload<ExtArgs>
        fields: Prisma.LoginAttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoginAttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoginAttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          findFirst: {
            args: Prisma.LoginAttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoginAttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          findMany: {
            args: Prisma.LoginAttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>[]
          }
          create: {
            args: Prisma.LoginAttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          createMany: {
            args: Prisma.LoginAttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LoginAttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          update: {
            args: Prisma.LoginAttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          deleteMany: {
            args: Prisma.LoginAttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoginAttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LoginAttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoginAttemptPayload>
          }
          aggregate: {
            args: Prisma.LoginAttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoginAttempt>
          }
          groupBy: {
            args: Prisma.LoginAttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoginAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoginAttemptCountArgs<ExtArgs>
            result: $Utils.Optional<LoginAttemptCountAggregateOutputType> | number
          }
        }
      }
      Venta: {
        payload: Prisma.$VentaPayload<ExtArgs>
        fields: Prisma.VentaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VentaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VentaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          findFirst: {
            args: Prisma.VentaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VentaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          findMany: {
            args: Prisma.VentaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>[]
          }
          create: {
            args: Prisma.VentaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          createMany: {
            args: Prisma.VentaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VentaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          update: {
            args: Prisma.VentaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          deleteMany: {
            args: Prisma.VentaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VentaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VentaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VentaPayload>
          }
          aggregate: {
            args: Prisma.VentaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenta>
          }
          groupBy: {
            args: Prisma.VentaGroupByArgs<ExtArgs>
            result: $Utils.Optional<VentaGroupByOutputType>[]
          }
          count: {
            args: Prisma.VentaCountArgs<ExtArgs>
            result: $Utils.Optional<VentaCountAggregateOutputType> | number
          }
        }
      }
      DatosArriendo: {
        payload: Prisma.$DatosArriendoPayload<ExtArgs>
        fields: Prisma.DatosArriendoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DatosArriendoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatosArriendoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DatosArriendoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatosArriendoPayload>
          }
          findFirst: {
            args: Prisma.DatosArriendoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatosArriendoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DatosArriendoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatosArriendoPayload>
          }
          findMany: {
            args: Prisma.DatosArriendoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatosArriendoPayload>[]
          }
          create: {
            args: Prisma.DatosArriendoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatosArriendoPayload>
          }
          createMany: {
            args: Prisma.DatosArriendoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DatosArriendoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatosArriendoPayload>
          }
          update: {
            args: Prisma.DatosArriendoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatosArriendoPayload>
          }
          deleteMany: {
            args: Prisma.DatosArriendoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DatosArriendoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DatosArriendoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DatosArriendoPayload>
          }
          aggregate: {
            args: Prisma.DatosArriendoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDatosArriendo>
          }
          groupBy: {
            args: Prisma.DatosArriendoGroupByArgs<ExtArgs>
            result: $Utils.Optional<DatosArriendoGroupByOutputType>[]
          }
          count: {
            args: Prisma.DatosArriendoCountArgs<ExtArgs>
            result: $Utils.Optional<DatosArriendoCountAggregateOutputType> | number
          }
        }
      }
      DetalleVenta: {
        payload: Prisma.$DetalleVentaPayload<ExtArgs>
        fields: Prisma.DetalleVentaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DetalleVentaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleVentaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DetalleVentaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleVentaPayload>
          }
          findFirst: {
            args: Prisma.DetalleVentaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleVentaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DetalleVentaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleVentaPayload>
          }
          findMany: {
            args: Prisma.DetalleVentaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleVentaPayload>[]
          }
          create: {
            args: Prisma.DetalleVentaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleVentaPayload>
          }
          createMany: {
            args: Prisma.DetalleVentaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DetalleVentaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleVentaPayload>
          }
          update: {
            args: Prisma.DetalleVentaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleVentaPayload>
          }
          deleteMany: {
            args: Prisma.DetalleVentaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DetalleVentaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DetalleVentaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DetalleVentaPayload>
          }
          aggregate: {
            args: Prisma.DetalleVentaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDetalleVenta>
          }
          groupBy: {
            args: Prisma.DetalleVentaGroupByArgs<ExtArgs>
            result: $Utils.Optional<DetalleVentaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DetalleVentaCountArgs<ExtArgs>
            result: $Utils.Optional<DetalleVentaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    loginAttempts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loginAttempts?: boolean | UserCountOutputTypeCountLoginAttemptsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLoginAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginAttemptWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    detalleVenta: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    detalleVenta?: boolean | ProductCountOutputTypeCountDetalleVentaArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountDetalleVentaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetalleVentaWhereInput
  }


  /**
   * Count Type VentaCountOutputType
   */

  export type VentaCountOutputType = {
    ventasDevolucion: number
    detalleVenta: number
  }

  export type VentaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ventasDevolucion?: boolean | VentaCountOutputTypeCountVentasDevolucionArgs
    detalleVenta?: boolean | VentaCountOutputTypeCountDetalleVentaArgs
  }

  // Custom InputTypes
  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VentaCountOutputType
     */
    select?: VentaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeCountVentasDevolucionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VentaWhereInput
  }

  /**
   * VentaCountOutputType without action
   */
  export type VentaCountOutputTypeCountDetalleVentaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetalleVentaWhereInput
  }


  /**
   * Count Type DetalleVentaCountOutputType
   */

  export type DetalleVentaCountOutputType = {
    detallesDevoluciones: number
  }

  export type DetalleVentaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    detallesDevoluciones?: boolean | DetalleVentaCountOutputTypeCountDetallesDevolucionesArgs
  }

  // Custom InputTypes
  /**
   * DetalleVentaCountOutputType without action
   */
  export type DetalleVentaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVentaCountOutputType
     */
    select?: DetalleVentaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DetalleVentaCountOutputType without action
   */
  export type DetalleVentaCountOutputTypeCountDetallesDevolucionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetalleVentaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loginAttempts?: boolean | User$loginAttemptsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loginAttempts?: boolean | User$loginAttemptsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      loginAttempts: Prisma.$LoginAttemptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    loginAttempts<T extends User$loginAttemptsArgs<ExtArgs> = {}>(args?: Subset<T, User$loginAttemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.loginAttempts
   */
  export type User$loginAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    where?: LoginAttemptWhereInput
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    cursor?: LoginAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoginAttemptScalarFieldEnum | LoginAttemptScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    priceUSD: number | null
    priceCLP: number | null
    priceBRL: number | null
    stock: number | null
  }

  export type ProductSumAggregateOutputType = {
    priceUSD: number | null
    priceCLP: number | null
    priceBRL: number | null
    stock: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: string | null
    priceUSD: number | null
    priceCLP: number | null
    priceBRL: number | null
    stock: number | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    type: string | null
    priceUSD: number | null
    priceCLP: number | null
    priceBRL: number | null
    stock: number | null
    imageUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    type: number
    priceUSD: number
    priceCLP: number
    priceBRL: number
    stock: number
    imageUrl: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    priceUSD?: true
    priceCLP?: true
    priceBRL?: true
    stock?: true
  }

  export type ProductSumAggregateInputType = {
    priceUSD?: true
    priceCLP?: true
    priceBRL?: true
    stock?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    priceUSD?: true
    priceCLP?: true
    priceBRL?: true
    stock?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    priceUSD?: true
    priceCLP?: true
    priceBRL?: true
    stock?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    type?: true
    priceUSD?: true
    priceCLP?: true
    priceBRL?: true
    stock?: true
    imageUrl?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    description: string
    type: string
    priceUSD: number
    priceCLP: number
    priceBRL: number
    stock: number
    imageUrl: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    priceUSD?: boolean
    priceCLP?: boolean
    priceBRL?: boolean
    stock?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    detalleVenta?: boolean | Product$detalleVentaArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>


  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    type?: boolean
    priceUSD?: boolean
    priceCLP?: boolean
    priceBRL?: boolean
    stock?: boolean
    imageUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    detalleVenta?: boolean | Product$detalleVentaArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      detalleVenta: Prisma.$DetalleVentaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      type: string
      priceUSD: number
      priceCLP: number
      priceBRL: number
      stock: number
      imageUrl: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    detalleVenta<T extends Product$detalleVentaArgs<ExtArgs> = {}>(args?: Subset<T, Product$detalleVentaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly type: FieldRef<"Product", 'String'>
    readonly priceUSD: FieldRef<"Product", 'Float'>
    readonly priceCLP: FieldRef<"Product", 'Float'>
    readonly priceBRL: FieldRef<"Product", 'Float'>
    readonly stock: FieldRef<"Product", 'Int'>
    readonly imageUrl: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.detalleVenta
   */
  export type Product$detalleVentaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    where?: DetalleVentaWhereInput
    orderBy?: DetalleVentaOrderByWithRelationInput | DetalleVentaOrderByWithRelationInput[]
    cursor?: DetalleVentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetalleVentaScalarFieldEnum | DetalleVentaScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model LoginAttempt
   */

  export type AggregateLoginAttempt = {
    _count: LoginAttemptCountAggregateOutputType | null
    _avg: LoginAttemptAvgAggregateOutputType | null
    _sum: LoginAttemptSumAggregateOutputType | null
    _min: LoginAttemptMinAggregateOutputType | null
    _max: LoginAttemptMaxAggregateOutputType | null
  }

  export type LoginAttemptAvgAggregateOutputType = {
    id: number | null
    attempts: number | null
  }

  export type LoginAttemptSumAggregateOutputType = {
    id: number | null
    attempts: number | null
  }

  export type LoginAttemptMinAggregateOutputType = {
    id: number | null
    ip: string | null
    email: string | null
    attempts: number | null
    blockedUntil: Date | null
    lastAttempt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type LoginAttemptMaxAggregateOutputType = {
    id: number | null
    ip: string | null
    email: string | null
    attempts: number | null
    blockedUntil: Date | null
    lastAttempt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type LoginAttemptCountAggregateOutputType = {
    id: number
    ip: number
    email: number
    attempts: number
    blockedUntil: number
    lastAttempt: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type LoginAttemptAvgAggregateInputType = {
    id?: true
    attempts?: true
  }

  export type LoginAttemptSumAggregateInputType = {
    id?: true
    attempts?: true
  }

  export type LoginAttemptMinAggregateInputType = {
    id?: true
    ip?: true
    email?: true
    attempts?: true
    blockedUntil?: true
    lastAttempt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type LoginAttemptMaxAggregateInputType = {
    id?: true
    ip?: true
    email?: true
    attempts?: true
    blockedUntil?: true
    lastAttempt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type LoginAttemptCountAggregateInputType = {
    id?: true
    ip?: true
    email?: true
    attempts?: true
    blockedUntil?: true
    lastAttempt?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type LoginAttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoginAttempt to aggregate.
     */
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     */
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoginAttempts
    **/
    _count?: true | LoginAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoginAttemptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoginAttemptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoginAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoginAttemptMaxAggregateInputType
  }

  export type GetLoginAttemptAggregateType<T extends LoginAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateLoginAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoginAttempt[P]>
      : GetScalarType<T[P], AggregateLoginAttempt[P]>
  }




  export type LoginAttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoginAttemptWhereInput
    orderBy?: LoginAttemptOrderByWithAggregationInput | LoginAttemptOrderByWithAggregationInput[]
    by: LoginAttemptScalarFieldEnum[] | LoginAttemptScalarFieldEnum
    having?: LoginAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoginAttemptCountAggregateInputType | true
    _avg?: LoginAttemptAvgAggregateInputType
    _sum?: LoginAttemptSumAggregateInputType
    _min?: LoginAttemptMinAggregateInputType
    _max?: LoginAttemptMaxAggregateInputType
  }

  export type LoginAttemptGroupByOutputType = {
    id: number
    ip: string
    email: string
    attempts: number
    blockedUntil: Date | null
    lastAttempt: Date
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: LoginAttemptCountAggregateOutputType | null
    _avg: LoginAttemptAvgAggregateOutputType | null
    _sum: LoginAttemptSumAggregateOutputType | null
    _min: LoginAttemptMinAggregateOutputType | null
    _max: LoginAttemptMaxAggregateOutputType | null
  }

  type GetLoginAttemptGroupByPayload<T extends LoginAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoginAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoginAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoginAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], LoginAttemptGroupByOutputType[P]>
        }
      >
    >


  export type LoginAttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ip?: boolean
    email?: boolean
    attempts?: boolean
    blockedUntil?: boolean
    lastAttempt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loginAttempt"]>


  export type LoginAttemptSelectScalar = {
    id?: boolean
    ip?: boolean
    email?: boolean
    attempts?: boolean
    blockedUntil?: boolean
    lastAttempt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type LoginAttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LoginAttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LoginAttempt"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ip: string
      email: string
      attempts: number
      blockedUntil: Date | null
      lastAttempt: Date
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["loginAttempt"]>
    composites: {}
  }

  type LoginAttemptGetPayload<S extends boolean | null | undefined | LoginAttemptDefaultArgs> = $Result.GetResult<Prisma.$LoginAttemptPayload, S>

  type LoginAttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LoginAttemptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LoginAttemptCountAggregateInputType | true
    }

  export interface LoginAttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LoginAttempt'], meta: { name: 'LoginAttempt' } }
    /**
     * Find zero or one LoginAttempt that matches the filter.
     * @param {LoginAttemptFindUniqueArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoginAttemptFindUniqueArgs>(args: SelectSubset<T, LoginAttemptFindUniqueArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LoginAttempt that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LoginAttemptFindUniqueOrThrowArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoginAttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, LoginAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LoginAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptFindFirstArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoginAttemptFindFirstArgs>(args?: SelectSubset<T, LoginAttemptFindFirstArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LoginAttempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptFindFirstOrThrowArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoginAttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, LoginAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LoginAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoginAttempts
     * const loginAttempts = await prisma.loginAttempt.findMany()
     * 
     * // Get first 10 LoginAttempts
     * const loginAttempts = await prisma.loginAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loginAttemptWithIdOnly = await prisma.loginAttempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoginAttemptFindManyArgs>(args?: SelectSubset<T, LoginAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LoginAttempt.
     * @param {LoginAttemptCreateArgs} args - Arguments to create a LoginAttempt.
     * @example
     * // Create one LoginAttempt
     * const LoginAttempt = await prisma.loginAttempt.create({
     *   data: {
     *     // ... data to create a LoginAttempt
     *   }
     * })
     * 
     */
    create<T extends LoginAttemptCreateArgs>(args: SelectSubset<T, LoginAttemptCreateArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LoginAttempts.
     * @param {LoginAttemptCreateManyArgs} args - Arguments to create many LoginAttempts.
     * @example
     * // Create many LoginAttempts
     * const loginAttempt = await prisma.loginAttempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoginAttemptCreateManyArgs>(args?: SelectSubset<T, LoginAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LoginAttempt.
     * @param {LoginAttemptDeleteArgs} args - Arguments to delete one LoginAttempt.
     * @example
     * // Delete one LoginAttempt
     * const LoginAttempt = await prisma.loginAttempt.delete({
     *   where: {
     *     // ... filter to delete one LoginAttempt
     *   }
     * })
     * 
     */
    delete<T extends LoginAttemptDeleteArgs>(args: SelectSubset<T, LoginAttemptDeleteArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LoginAttempt.
     * @param {LoginAttemptUpdateArgs} args - Arguments to update one LoginAttempt.
     * @example
     * // Update one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoginAttemptUpdateArgs>(args: SelectSubset<T, LoginAttemptUpdateArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LoginAttempts.
     * @param {LoginAttemptDeleteManyArgs} args - Arguments to filter LoginAttempts to delete.
     * @example
     * // Delete a few LoginAttempts
     * const { count } = await prisma.loginAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoginAttemptDeleteManyArgs>(args?: SelectSubset<T, LoginAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoginAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoginAttempts
     * const loginAttempt = await prisma.loginAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoginAttemptUpdateManyArgs>(args: SelectSubset<T, LoginAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LoginAttempt.
     * @param {LoginAttemptUpsertArgs} args - Arguments to update or create a LoginAttempt.
     * @example
     * // Update or create a LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.upsert({
     *   create: {
     *     // ... data to create a LoginAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoginAttempt we want to update
     *   }
     * })
     */
    upsert<T extends LoginAttemptUpsertArgs>(args: SelectSubset<T, LoginAttemptUpsertArgs<ExtArgs>>): Prisma__LoginAttemptClient<$Result.GetResult<Prisma.$LoginAttemptPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LoginAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptCountArgs} args - Arguments to filter LoginAttempts to count.
     * @example
     * // Count the number of LoginAttempts
     * const count = await prisma.loginAttempt.count({
     *   where: {
     *     // ... the filter for the LoginAttempts we want to count
     *   }
     * })
    **/
    count<T extends LoginAttemptCountArgs>(
      args?: Subset<T, LoginAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoginAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoginAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoginAttemptAggregateArgs>(args: Subset<T, LoginAttemptAggregateArgs>): Prisma.PrismaPromise<GetLoginAttemptAggregateType<T>>

    /**
     * Group by LoginAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoginAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoginAttemptGroupByArgs['orderBy'] }
        : { orderBy?: LoginAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoginAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoginAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LoginAttempt model
   */
  readonly fields: LoginAttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoginAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoginAttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LoginAttempt model
   */ 
  interface LoginAttemptFieldRefs {
    readonly id: FieldRef<"LoginAttempt", 'Int'>
    readonly ip: FieldRef<"LoginAttempt", 'String'>
    readonly email: FieldRef<"LoginAttempt", 'String'>
    readonly attempts: FieldRef<"LoginAttempt", 'Int'>
    readonly blockedUntil: FieldRef<"LoginAttempt", 'DateTime'>
    readonly lastAttempt: FieldRef<"LoginAttempt", 'DateTime'>
    readonly createdAt: FieldRef<"LoginAttempt", 'DateTime'>
    readonly updatedAt: FieldRef<"LoginAttempt", 'DateTime'>
    readonly userId: FieldRef<"LoginAttempt", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LoginAttempt findUnique
   */
  export type LoginAttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempt to fetch.
     */
    where: LoginAttemptWhereUniqueInput
  }

  /**
   * LoginAttempt findUniqueOrThrow
   */
  export type LoginAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempt to fetch.
     */
    where: LoginAttemptWhereUniqueInput
  }

  /**
   * LoginAttempt findFirst
   */
  export type LoginAttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempt to fetch.
     */
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     */
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoginAttempts.
     */
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoginAttempts.
     */
    distinct?: LoginAttemptScalarFieldEnum | LoginAttemptScalarFieldEnum[]
  }

  /**
   * LoginAttempt findFirstOrThrow
   */
  export type LoginAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempt to fetch.
     */
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     */
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoginAttempts.
     */
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoginAttempts.
     */
    distinct?: LoginAttemptScalarFieldEnum | LoginAttemptScalarFieldEnum[]
  }

  /**
   * LoginAttempt findMany
   */
  export type LoginAttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter, which LoginAttempts to fetch.
     */
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     */
    orderBy?: LoginAttemptOrderByWithRelationInput | LoginAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoginAttempts.
     */
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     */
    skip?: number
    distinct?: LoginAttemptScalarFieldEnum | LoginAttemptScalarFieldEnum[]
  }

  /**
   * LoginAttempt create
   */
  export type LoginAttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a LoginAttempt.
     */
    data: XOR<LoginAttemptCreateInput, LoginAttemptUncheckedCreateInput>
  }

  /**
   * LoginAttempt createMany
   */
  export type LoginAttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LoginAttempts.
     */
    data: LoginAttemptCreateManyInput | LoginAttemptCreateManyInput[]
  }

  /**
   * LoginAttempt update
   */
  export type LoginAttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a LoginAttempt.
     */
    data: XOR<LoginAttemptUpdateInput, LoginAttemptUncheckedUpdateInput>
    /**
     * Choose, which LoginAttempt to update.
     */
    where: LoginAttemptWhereUniqueInput
  }

  /**
   * LoginAttempt updateMany
   */
  export type LoginAttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LoginAttempts.
     */
    data: XOR<LoginAttemptUpdateManyMutationInput, LoginAttemptUncheckedUpdateManyInput>
    /**
     * Filter which LoginAttempts to update
     */
    where?: LoginAttemptWhereInput
  }

  /**
   * LoginAttempt upsert
   */
  export type LoginAttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the LoginAttempt to update in case it exists.
     */
    where: LoginAttemptWhereUniqueInput
    /**
     * In case the LoginAttempt found by the `where` argument doesn't exist, create a new LoginAttempt with this data.
     */
    create: XOR<LoginAttemptCreateInput, LoginAttemptUncheckedCreateInput>
    /**
     * In case the LoginAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoginAttemptUpdateInput, LoginAttemptUncheckedUpdateInput>
  }

  /**
   * LoginAttempt delete
   */
  export type LoginAttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
    /**
     * Filter which LoginAttempt to delete.
     */
    where: LoginAttemptWhereUniqueInput
  }

  /**
   * LoginAttempt deleteMany
   */
  export type LoginAttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LoginAttempts to delete
     */
    where?: LoginAttemptWhereInput
  }

  /**
   * LoginAttempt without action
   */
  export type LoginAttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     */
    select?: LoginAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoginAttemptInclude<ExtArgs> | null
  }


  /**
   * Model Venta
   */

  export type AggregateVenta = {
    _count: VentaCountAggregateOutputType | null
    _avg: VentaAvgAggregateOutputType | null
    _sum: VentaSumAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  export type VentaAvgAggregateOutputType = {
    total: number | null
    vuelto: number | null
  }

  export type VentaSumAggregateOutputType = {
    total: number | null
    vuelto: number | null
  }

  export type VentaMinAggregateOutputType = {
    id: string | null
    idVenta: string | null
    tipoTransaccion: string | null
    estadoVenta: string | null
    fecha: Date | null
    tipoMoneda: string | null
    medioPago: string | null
    total: number | null
    vuelto: number | null
    idCliente: string | null
    nombreCliente: string | null
    email: string | null
    telefono: string | null
    dni: string | null
    idVendedor: string | null
    idVentaRelacionada: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VentaMaxAggregateOutputType = {
    id: string | null
    idVenta: string | null
    tipoTransaccion: string | null
    estadoVenta: string | null
    fecha: Date | null
    tipoMoneda: string | null
    medioPago: string | null
    total: number | null
    vuelto: number | null
    idCliente: string | null
    nombreCliente: string | null
    email: string | null
    telefono: string | null
    dni: string | null
    idVendedor: string | null
    idVentaRelacionada: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VentaCountAggregateOutputType = {
    id: number
    idVenta: number
    tipoTransaccion: number
    estadoVenta: number
    fecha: number
    tipoMoneda: number
    medioPago: number
    total: number
    vuelto: number
    idCliente: number
    nombreCliente: number
    email: number
    telefono: number
    dni: number
    idVendedor: number
    idVentaRelacionada: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VentaAvgAggregateInputType = {
    total?: true
    vuelto?: true
  }

  export type VentaSumAggregateInputType = {
    total?: true
    vuelto?: true
  }

  export type VentaMinAggregateInputType = {
    id?: true
    idVenta?: true
    tipoTransaccion?: true
    estadoVenta?: true
    fecha?: true
    tipoMoneda?: true
    medioPago?: true
    total?: true
    vuelto?: true
    idCliente?: true
    nombreCliente?: true
    email?: true
    telefono?: true
    dni?: true
    idVendedor?: true
    idVentaRelacionada?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VentaMaxAggregateInputType = {
    id?: true
    idVenta?: true
    tipoTransaccion?: true
    estadoVenta?: true
    fecha?: true
    tipoMoneda?: true
    medioPago?: true
    total?: true
    vuelto?: true
    idCliente?: true
    nombreCliente?: true
    email?: true
    telefono?: true
    dni?: true
    idVendedor?: true
    idVentaRelacionada?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VentaCountAggregateInputType = {
    id?: true
    idVenta?: true
    tipoTransaccion?: true
    estadoVenta?: true
    fecha?: true
    tipoMoneda?: true
    medioPago?: true
    total?: true
    vuelto?: true
    idCliente?: true
    nombreCliente?: true
    email?: true
    telefono?: true
    dni?: true
    idVendedor?: true
    idVentaRelacionada?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VentaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venta to aggregate.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ventas
    **/
    _count?: true | VentaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VentaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VentaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VentaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VentaMaxAggregateInputType
  }

  export type GetVentaAggregateType<T extends VentaAggregateArgs> = {
        [P in keyof T & keyof AggregateVenta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenta[P]>
      : GetScalarType<T[P], AggregateVenta[P]>
  }




  export type VentaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VentaWhereInput
    orderBy?: VentaOrderByWithAggregationInput | VentaOrderByWithAggregationInput[]
    by: VentaScalarFieldEnum[] | VentaScalarFieldEnum
    having?: VentaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VentaCountAggregateInputType | true
    _avg?: VentaAvgAggregateInputType
    _sum?: VentaSumAggregateInputType
    _min?: VentaMinAggregateInputType
    _max?: VentaMaxAggregateInputType
  }

  export type VentaGroupByOutputType = {
    id: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    idVentaRelacionada: string | null
    createdAt: Date
    updatedAt: Date
    _count: VentaCountAggregateOutputType | null
    _avg: VentaAvgAggregateOutputType | null
    _sum: VentaSumAggregateOutputType | null
    _min: VentaMinAggregateOutputType | null
    _max: VentaMaxAggregateOutputType | null
  }

  type GetVentaGroupByPayload<T extends VentaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VentaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VentaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VentaGroupByOutputType[P]>
            : GetScalarType<T[P], VentaGroupByOutputType[P]>
        }
      >
    >


  export type VentaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idVenta?: boolean
    tipoTransaccion?: boolean
    estadoVenta?: boolean
    fecha?: boolean
    tipoMoneda?: boolean
    medioPago?: boolean
    total?: boolean
    vuelto?: boolean
    idCliente?: boolean
    nombreCliente?: boolean
    email?: boolean
    telefono?: boolean
    dni?: boolean
    idVendedor?: boolean
    idVentaRelacionada?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ventaRelacionada?: boolean | Venta$ventaRelacionadaArgs<ExtArgs>
    ventasDevolucion?: boolean | Venta$ventasDevolucionArgs<ExtArgs>
    datosArriendo?: boolean | Venta$datosArriendoArgs<ExtArgs>
    detalleVenta?: boolean | Venta$detalleVentaArgs<ExtArgs>
    _count?: boolean | VentaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["venta"]>


  export type VentaSelectScalar = {
    id?: boolean
    idVenta?: boolean
    tipoTransaccion?: boolean
    estadoVenta?: boolean
    fecha?: boolean
    tipoMoneda?: boolean
    medioPago?: boolean
    total?: boolean
    vuelto?: boolean
    idCliente?: boolean
    nombreCliente?: boolean
    email?: boolean
    telefono?: boolean
    dni?: boolean
    idVendedor?: boolean
    idVentaRelacionada?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VentaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ventaRelacionada?: boolean | Venta$ventaRelacionadaArgs<ExtArgs>
    ventasDevolucion?: boolean | Venta$ventasDevolucionArgs<ExtArgs>
    datosArriendo?: boolean | Venta$datosArriendoArgs<ExtArgs>
    detalleVenta?: boolean | Venta$detalleVentaArgs<ExtArgs>
    _count?: boolean | VentaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $VentaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Venta"
    objects: {
      ventaRelacionada: Prisma.$VentaPayload<ExtArgs> | null
      ventasDevolucion: Prisma.$VentaPayload<ExtArgs>[]
      datosArriendo: Prisma.$DatosArriendoPayload<ExtArgs> | null
      detalleVenta: Prisma.$DetalleVentaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      idVenta: string
      tipoTransaccion: string
      estadoVenta: string
      fecha: Date
      tipoMoneda: string
      medioPago: string
      total: number
      vuelto: number | null
      idCliente: string
      nombreCliente: string
      email: string
      telefono: string
      dni: string
      idVendedor: string
      idVentaRelacionada: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["venta"]>
    composites: {}
  }

  type VentaGetPayload<S extends boolean | null | undefined | VentaDefaultArgs> = $Result.GetResult<Prisma.$VentaPayload, S>

  type VentaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VentaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VentaCountAggregateInputType | true
    }

  export interface VentaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Venta'], meta: { name: 'Venta' } }
    /**
     * Find zero or one Venta that matches the filter.
     * @param {VentaFindUniqueArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VentaFindUniqueArgs>(args: SelectSubset<T, VentaFindUniqueArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Venta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VentaFindUniqueOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VentaFindUniqueOrThrowArgs>(args: SelectSubset<T, VentaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Venta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindFirstArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VentaFindFirstArgs>(args?: SelectSubset<T, VentaFindFirstArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Venta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindFirstOrThrowArgs} args - Arguments to find a Venta
     * @example
     * // Get one Venta
     * const venta = await prisma.venta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VentaFindFirstOrThrowArgs>(args?: SelectSubset<T, VentaFindFirstOrThrowArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ventas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ventas
     * const ventas = await prisma.venta.findMany()
     * 
     * // Get first 10 Ventas
     * const ventas = await prisma.venta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ventaWithIdOnly = await prisma.venta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VentaFindManyArgs>(args?: SelectSubset<T, VentaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Venta.
     * @param {VentaCreateArgs} args - Arguments to create a Venta.
     * @example
     * // Create one Venta
     * const Venta = await prisma.venta.create({
     *   data: {
     *     // ... data to create a Venta
     *   }
     * })
     * 
     */
    create<T extends VentaCreateArgs>(args: SelectSubset<T, VentaCreateArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ventas.
     * @param {VentaCreateManyArgs} args - Arguments to create many Ventas.
     * @example
     * // Create many Ventas
     * const venta = await prisma.venta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VentaCreateManyArgs>(args?: SelectSubset<T, VentaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Venta.
     * @param {VentaDeleteArgs} args - Arguments to delete one Venta.
     * @example
     * // Delete one Venta
     * const Venta = await prisma.venta.delete({
     *   where: {
     *     // ... filter to delete one Venta
     *   }
     * })
     * 
     */
    delete<T extends VentaDeleteArgs>(args: SelectSubset<T, VentaDeleteArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Venta.
     * @param {VentaUpdateArgs} args - Arguments to update one Venta.
     * @example
     * // Update one Venta
     * const venta = await prisma.venta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VentaUpdateArgs>(args: SelectSubset<T, VentaUpdateArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ventas.
     * @param {VentaDeleteManyArgs} args - Arguments to filter Ventas to delete.
     * @example
     * // Delete a few Ventas
     * const { count } = await prisma.venta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VentaDeleteManyArgs>(args?: SelectSubset<T, VentaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ventas
     * const venta = await prisma.venta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VentaUpdateManyArgs>(args: SelectSubset<T, VentaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Venta.
     * @param {VentaUpsertArgs} args - Arguments to update or create a Venta.
     * @example
     * // Update or create a Venta
     * const venta = await prisma.venta.upsert({
     *   create: {
     *     // ... data to create a Venta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venta we want to update
     *   }
     * })
     */
    upsert<T extends VentaUpsertArgs>(args: SelectSubset<T, VentaUpsertArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ventas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaCountArgs} args - Arguments to filter Ventas to count.
     * @example
     * // Count the number of Ventas
     * const count = await prisma.venta.count({
     *   where: {
     *     // ... the filter for the Ventas we want to count
     *   }
     * })
    **/
    count<T extends VentaCountArgs>(
      args?: Subset<T, VentaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VentaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VentaAggregateArgs>(args: Subset<T, VentaAggregateArgs>): Prisma.PrismaPromise<GetVentaAggregateType<T>>

    /**
     * Group by Venta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VentaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VentaGroupByArgs['orderBy'] }
        : { orderBy?: VentaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Venta model
   */
  readonly fields: VentaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Venta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VentaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    ventaRelacionada<T extends Venta$ventaRelacionadaArgs<ExtArgs> = {}>(args?: Subset<T, Venta$ventaRelacionadaArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    ventasDevolucion<T extends Venta$ventasDevolucionArgs<ExtArgs> = {}>(args?: Subset<T, Venta$ventasDevolucionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findMany"> | Null>
    datosArriendo<T extends Venta$datosArriendoArgs<ExtArgs> = {}>(args?: Subset<T, Venta$datosArriendoArgs<ExtArgs>>): Prisma__DatosArriendoClient<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    detalleVenta<T extends Venta$detalleVentaArgs<ExtArgs> = {}>(args?: Subset<T, Venta$detalleVentaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Venta model
   */ 
  interface VentaFieldRefs {
    readonly id: FieldRef<"Venta", 'String'>
    readonly idVenta: FieldRef<"Venta", 'String'>
    readonly tipoTransaccion: FieldRef<"Venta", 'String'>
    readonly estadoVenta: FieldRef<"Venta", 'String'>
    readonly fecha: FieldRef<"Venta", 'DateTime'>
    readonly tipoMoneda: FieldRef<"Venta", 'String'>
    readonly medioPago: FieldRef<"Venta", 'String'>
    readonly total: FieldRef<"Venta", 'Float'>
    readonly vuelto: FieldRef<"Venta", 'Float'>
    readonly idCliente: FieldRef<"Venta", 'String'>
    readonly nombreCliente: FieldRef<"Venta", 'String'>
    readonly email: FieldRef<"Venta", 'String'>
    readonly telefono: FieldRef<"Venta", 'String'>
    readonly dni: FieldRef<"Venta", 'String'>
    readonly idVendedor: FieldRef<"Venta", 'String'>
    readonly idVentaRelacionada: FieldRef<"Venta", 'String'>
    readonly createdAt: FieldRef<"Venta", 'DateTime'>
    readonly updatedAt: FieldRef<"Venta", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Venta findUnique
   */
  export type VentaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta findUniqueOrThrow
   */
  export type VentaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta findFirst
   */
  export type VentaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventas.
     */
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta findFirstOrThrow
   */
  export type VentaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Venta to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventas.
     */
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta findMany
   */
  export type VentaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter, which Ventas to fetch.
     */
    where?: VentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventas to fetch.
     */
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ventas.
     */
    cursor?: VentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventas.
     */
    skip?: number
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta create
   */
  export type VentaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The data needed to create a Venta.
     */
    data: XOR<VentaCreateInput, VentaUncheckedCreateInput>
  }

  /**
   * Venta createMany
   */
  export type VentaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ventas.
     */
    data: VentaCreateManyInput | VentaCreateManyInput[]
  }

  /**
   * Venta update
   */
  export type VentaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The data needed to update a Venta.
     */
    data: XOR<VentaUpdateInput, VentaUncheckedUpdateInput>
    /**
     * Choose, which Venta to update.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta updateMany
   */
  export type VentaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ventas.
     */
    data: XOR<VentaUpdateManyMutationInput, VentaUncheckedUpdateManyInput>
    /**
     * Filter which Ventas to update
     */
    where?: VentaWhereInput
  }

  /**
   * Venta upsert
   */
  export type VentaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * The filter to search for the Venta to update in case it exists.
     */
    where: VentaWhereUniqueInput
    /**
     * In case the Venta found by the `where` argument doesn't exist, create a new Venta with this data.
     */
    create: XOR<VentaCreateInput, VentaUncheckedCreateInput>
    /**
     * In case the Venta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VentaUpdateInput, VentaUncheckedUpdateInput>
  }

  /**
   * Venta delete
   */
  export type VentaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    /**
     * Filter which Venta to delete.
     */
    where: VentaWhereUniqueInput
  }

  /**
   * Venta deleteMany
   */
  export type VentaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ventas to delete
     */
    where?: VentaWhereInput
  }

  /**
   * Venta.ventaRelacionada
   */
  export type Venta$ventaRelacionadaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    where?: VentaWhereInput
  }

  /**
   * Venta.ventasDevolucion
   */
  export type Venta$ventasDevolucionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
    where?: VentaWhereInput
    orderBy?: VentaOrderByWithRelationInput | VentaOrderByWithRelationInput[]
    cursor?: VentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VentaScalarFieldEnum | VentaScalarFieldEnum[]
  }

  /**
   * Venta.datosArriendo
   */
  export type Venta$datosArriendoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    where?: DatosArriendoWhereInput
  }

  /**
   * Venta.detalleVenta
   */
  export type Venta$detalleVentaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    where?: DetalleVentaWhereInput
    orderBy?: DetalleVentaOrderByWithRelationInput | DetalleVentaOrderByWithRelationInput[]
    cursor?: DetalleVentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetalleVentaScalarFieldEnum | DetalleVentaScalarFieldEnum[]
  }

  /**
   * Venta without action
   */
  export type VentaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venta
     */
    select?: VentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VentaInclude<ExtArgs> | null
  }


  /**
   * Model DatosArriendo
   */

  export type AggregateDatosArriendo = {
    _count: DatosArriendoCountAggregateOutputType | null
    _min: DatosArriendoMinAggregateOutputType | null
    _max: DatosArriendoMaxAggregateOutputType | null
  }

  export type DatosArriendoMinAggregateOutputType = {
    id: string | null
    fechaArriendo: Date | null
    fechaEntrega: Date | null
    patente: string | null
    ventaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DatosArriendoMaxAggregateOutputType = {
    id: string | null
    fechaArriendo: Date | null
    fechaEntrega: Date | null
    patente: string | null
    ventaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DatosArriendoCountAggregateOutputType = {
    id: number
    fechaArriendo: number
    fechaEntrega: number
    patente: number
    ventaId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DatosArriendoMinAggregateInputType = {
    id?: true
    fechaArriendo?: true
    fechaEntrega?: true
    patente?: true
    ventaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DatosArriendoMaxAggregateInputType = {
    id?: true
    fechaArriendo?: true
    fechaEntrega?: true
    patente?: true
    ventaId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DatosArriendoCountAggregateInputType = {
    id?: true
    fechaArriendo?: true
    fechaEntrega?: true
    patente?: true
    ventaId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DatosArriendoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DatosArriendo to aggregate.
     */
    where?: DatosArriendoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatosArriendos to fetch.
     */
    orderBy?: DatosArriendoOrderByWithRelationInput | DatosArriendoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DatosArriendoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatosArriendos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatosArriendos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DatosArriendos
    **/
    _count?: true | DatosArriendoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DatosArriendoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DatosArriendoMaxAggregateInputType
  }

  export type GetDatosArriendoAggregateType<T extends DatosArriendoAggregateArgs> = {
        [P in keyof T & keyof AggregateDatosArriendo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDatosArriendo[P]>
      : GetScalarType<T[P], AggregateDatosArriendo[P]>
  }




  export type DatosArriendoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DatosArriendoWhereInput
    orderBy?: DatosArriendoOrderByWithAggregationInput | DatosArriendoOrderByWithAggregationInput[]
    by: DatosArriendoScalarFieldEnum[] | DatosArriendoScalarFieldEnum
    having?: DatosArriendoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DatosArriendoCountAggregateInputType | true
    _min?: DatosArriendoMinAggregateInputType
    _max?: DatosArriendoMaxAggregateInputType
  }

  export type DatosArriendoGroupByOutputType = {
    id: string
    fechaArriendo: Date
    fechaEntrega: Date
    patente: string
    ventaId: string
    createdAt: Date
    updatedAt: Date
    _count: DatosArriendoCountAggregateOutputType | null
    _min: DatosArriendoMinAggregateOutputType | null
    _max: DatosArriendoMaxAggregateOutputType | null
  }

  type GetDatosArriendoGroupByPayload<T extends DatosArriendoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DatosArriendoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DatosArriendoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DatosArriendoGroupByOutputType[P]>
            : GetScalarType<T[P], DatosArriendoGroupByOutputType[P]>
        }
      >
    >


  export type DatosArriendoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fechaArriendo?: boolean
    fechaEntrega?: boolean
    patente?: boolean
    ventaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["datosArriendo"]>


  export type DatosArriendoSelectScalar = {
    id?: boolean
    fechaArriendo?: boolean
    fechaEntrega?: boolean
    patente?: boolean
    ventaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DatosArriendoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    venta?: boolean | VentaDefaultArgs<ExtArgs>
  }

  export type $DatosArriendoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DatosArriendo"
    objects: {
      venta: Prisma.$VentaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fechaArriendo: Date
      fechaEntrega: Date
      patente: string
      ventaId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["datosArriendo"]>
    composites: {}
  }

  type DatosArriendoGetPayload<S extends boolean | null | undefined | DatosArriendoDefaultArgs> = $Result.GetResult<Prisma.$DatosArriendoPayload, S>

  type DatosArriendoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DatosArriendoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DatosArriendoCountAggregateInputType | true
    }

  export interface DatosArriendoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DatosArriendo'], meta: { name: 'DatosArriendo' } }
    /**
     * Find zero or one DatosArriendo that matches the filter.
     * @param {DatosArriendoFindUniqueArgs} args - Arguments to find a DatosArriendo
     * @example
     * // Get one DatosArriendo
     * const datosArriendo = await prisma.datosArriendo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DatosArriendoFindUniqueArgs>(args: SelectSubset<T, DatosArriendoFindUniqueArgs<ExtArgs>>): Prisma__DatosArriendoClient<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DatosArriendo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DatosArriendoFindUniqueOrThrowArgs} args - Arguments to find a DatosArriendo
     * @example
     * // Get one DatosArriendo
     * const datosArriendo = await prisma.datosArriendo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DatosArriendoFindUniqueOrThrowArgs>(args: SelectSubset<T, DatosArriendoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DatosArriendoClient<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DatosArriendo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatosArriendoFindFirstArgs} args - Arguments to find a DatosArriendo
     * @example
     * // Get one DatosArriendo
     * const datosArriendo = await prisma.datosArriendo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DatosArriendoFindFirstArgs>(args?: SelectSubset<T, DatosArriendoFindFirstArgs<ExtArgs>>): Prisma__DatosArriendoClient<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DatosArriendo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatosArriendoFindFirstOrThrowArgs} args - Arguments to find a DatosArriendo
     * @example
     * // Get one DatosArriendo
     * const datosArriendo = await prisma.datosArriendo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DatosArriendoFindFirstOrThrowArgs>(args?: SelectSubset<T, DatosArriendoFindFirstOrThrowArgs<ExtArgs>>): Prisma__DatosArriendoClient<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DatosArriendos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatosArriendoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DatosArriendos
     * const datosArriendos = await prisma.datosArriendo.findMany()
     * 
     * // Get first 10 DatosArriendos
     * const datosArriendos = await prisma.datosArriendo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const datosArriendoWithIdOnly = await prisma.datosArriendo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DatosArriendoFindManyArgs>(args?: SelectSubset<T, DatosArriendoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DatosArriendo.
     * @param {DatosArriendoCreateArgs} args - Arguments to create a DatosArriendo.
     * @example
     * // Create one DatosArriendo
     * const DatosArriendo = await prisma.datosArriendo.create({
     *   data: {
     *     // ... data to create a DatosArriendo
     *   }
     * })
     * 
     */
    create<T extends DatosArriendoCreateArgs>(args: SelectSubset<T, DatosArriendoCreateArgs<ExtArgs>>): Prisma__DatosArriendoClient<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DatosArriendos.
     * @param {DatosArriendoCreateManyArgs} args - Arguments to create many DatosArriendos.
     * @example
     * // Create many DatosArriendos
     * const datosArriendo = await prisma.datosArriendo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DatosArriendoCreateManyArgs>(args?: SelectSubset<T, DatosArriendoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DatosArriendo.
     * @param {DatosArriendoDeleteArgs} args - Arguments to delete one DatosArriendo.
     * @example
     * // Delete one DatosArriendo
     * const DatosArriendo = await prisma.datosArriendo.delete({
     *   where: {
     *     // ... filter to delete one DatosArriendo
     *   }
     * })
     * 
     */
    delete<T extends DatosArriendoDeleteArgs>(args: SelectSubset<T, DatosArriendoDeleteArgs<ExtArgs>>): Prisma__DatosArriendoClient<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DatosArriendo.
     * @param {DatosArriendoUpdateArgs} args - Arguments to update one DatosArriendo.
     * @example
     * // Update one DatosArriendo
     * const datosArriendo = await prisma.datosArriendo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DatosArriendoUpdateArgs>(args: SelectSubset<T, DatosArriendoUpdateArgs<ExtArgs>>): Prisma__DatosArriendoClient<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DatosArriendos.
     * @param {DatosArriendoDeleteManyArgs} args - Arguments to filter DatosArriendos to delete.
     * @example
     * // Delete a few DatosArriendos
     * const { count } = await prisma.datosArriendo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DatosArriendoDeleteManyArgs>(args?: SelectSubset<T, DatosArriendoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DatosArriendos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatosArriendoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DatosArriendos
     * const datosArriendo = await prisma.datosArriendo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DatosArriendoUpdateManyArgs>(args: SelectSubset<T, DatosArriendoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DatosArriendo.
     * @param {DatosArriendoUpsertArgs} args - Arguments to update or create a DatosArriendo.
     * @example
     * // Update or create a DatosArriendo
     * const datosArriendo = await prisma.datosArriendo.upsert({
     *   create: {
     *     // ... data to create a DatosArriendo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DatosArriendo we want to update
     *   }
     * })
     */
    upsert<T extends DatosArriendoUpsertArgs>(args: SelectSubset<T, DatosArriendoUpsertArgs<ExtArgs>>): Prisma__DatosArriendoClient<$Result.GetResult<Prisma.$DatosArriendoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DatosArriendos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatosArriendoCountArgs} args - Arguments to filter DatosArriendos to count.
     * @example
     * // Count the number of DatosArriendos
     * const count = await prisma.datosArriendo.count({
     *   where: {
     *     // ... the filter for the DatosArriendos we want to count
     *   }
     * })
    **/
    count<T extends DatosArriendoCountArgs>(
      args?: Subset<T, DatosArriendoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DatosArriendoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DatosArriendo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatosArriendoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DatosArriendoAggregateArgs>(args: Subset<T, DatosArriendoAggregateArgs>): Prisma.PrismaPromise<GetDatosArriendoAggregateType<T>>

    /**
     * Group by DatosArriendo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DatosArriendoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DatosArriendoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DatosArriendoGroupByArgs['orderBy'] }
        : { orderBy?: DatosArriendoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DatosArriendoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDatosArriendoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DatosArriendo model
   */
  readonly fields: DatosArriendoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DatosArriendo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DatosArriendoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    venta<T extends VentaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VentaDefaultArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DatosArriendo model
   */ 
  interface DatosArriendoFieldRefs {
    readonly id: FieldRef<"DatosArriendo", 'String'>
    readonly fechaArriendo: FieldRef<"DatosArriendo", 'DateTime'>
    readonly fechaEntrega: FieldRef<"DatosArriendo", 'DateTime'>
    readonly patente: FieldRef<"DatosArriendo", 'String'>
    readonly ventaId: FieldRef<"DatosArriendo", 'String'>
    readonly createdAt: FieldRef<"DatosArriendo", 'DateTime'>
    readonly updatedAt: FieldRef<"DatosArriendo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DatosArriendo findUnique
   */
  export type DatosArriendoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    /**
     * Filter, which DatosArriendo to fetch.
     */
    where: DatosArriendoWhereUniqueInput
  }

  /**
   * DatosArriendo findUniqueOrThrow
   */
  export type DatosArriendoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    /**
     * Filter, which DatosArriendo to fetch.
     */
    where: DatosArriendoWhereUniqueInput
  }

  /**
   * DatosArriendo findFirst
   */
  export type DatosArriendoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    /**
     * Filter, which DatosArriendo to fetch.
     */
    where?: DatosArriendoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatosArriendos to fetch.
     */
    orderBy?: DatosArriendoOrderByWithRelationInput | DatosArriendoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DatosArriendos.
     */
    cursor?: DatosArriendoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatosArriendos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatosArriendos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DatosArriendos.
     */
    distinct?: DatosArriendoScalarFieldEnum | DatosArriendoScalarFieldEnum[]
  }

  /**
   * DatosArriendo findFirstOrThrow
   */
  export type DatosArriendoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    /**
     * Filter, which DatosArriendo to fetch.
     */
    where?: DatosArriendoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatosArriendos to fetch.
     */
    orderBy?: DatosArriendoOrderByWithRelationInput | DatosArriendoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DatosArriendos.
     */
    cursor?: DatosArriendoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatosArriendos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatosArriendos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DatosArriendos.
     */
    distinct?: DatosArriendoScalarFieldEnum | DatosArriendoScalarFieldEnum[]
  }

  /**
   * DatosArriendo findMany
   */
  export type DatosArriendoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    /**
     * Filter, which DatosArriendos to fetch.
     */
    where?: DatosArriendoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DatosArriendos to fetch.
     */
    orderBy?: DatosArriendoOrderByWithRelationInput | DatosArriendoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DatosArriendos.
     */
    cursor?: DatosArriendoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DatosArriendos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DatosArriendos.
     */
    skip?: number
    distinct?: DatosArriendoScalarFieldEnum | DatosArriendoScalarFieldEnum[]
  }

  /**
   * DatosArriendo create
   */
  export type DatosArriendoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    /**
     * The data needed to create a DatosArriendo.
     */
    data: XOR<DatosArriendoCreateInput, DatosArriendoUncheckedCreateInput>
  }

  /**
   * DatosArriendo createMany
   */
  export type DatosArriendoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DatosArriendos.
     */
    data: DatosArriendoCreateManyInput | DatosArriendoCreateManyInput[]
  }

  /**
   * DatosArriendo update
   */
  export type DatosArriendoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    /**
     * The data needed to update a DatosArriendo.
     */
    data: XOR<DatosArriendoUpdateInput, DatosArriendoUncheckedUpdateInput>
    /**
     * Choose, which DatosArriendo to update.
     */
    where: DatosArriendoWhereUniqueInput
  }

  /**
   * DatosArriendo updateMany
   */
  export type DatosArriendoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DatosArriendos.
     */
    data: XOR<DatosArriendoUpdateManyMutationInput, DatosArriendoUncheckedUpdateManyInput>
    /**
     * Filter which DatosArriendos to update
     */
    where?: DatosArriendoWhereInput
  }

  /**
   * DatosArriendo upsert
   */
  export type DatosArriendoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    /**
     * The filter to search for the DatosArriendo to update in case it exists.
     */
    where: DatosArriendoWhereUniqueInput
    /**
     * In case the DatosArriendo found by the `where` argument doesn't exist, create a new DatosArriendo with this data.
     */
    create: XOR<DatosArriendoCreateInput, DatosArriendoUncheckedCreateInput>
    /**
     * In case the DatosArriendo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DatosArriendoUpdateInput, DatosArriendoUncheckedUpdateInput>
  }

  /**
   * DatosArriendo delete
   */
  export type DatosArriendoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
    /**
     * Filter which DatosArriendo to delete.
     */
    where: DatosArriendoWhereUniqueInput
  }

  /**
   * DatosArriendo deleteMany
   */
  export type DatosArriendoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DatosArriendos to delete
     */
    where?: DatosArriendoWhereInput
  }

  /**
   * DatosArriendo without action
   */
  export type DatosArriendoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DatosArriendo
     */
    select?: DatosArriendoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DatosArriendoInclude<ExtArgs> | null
  }


  /**
   * Model DetalleVenta
   */

  export type AggregateDetalleVenta = {
    _count: DetalleVentaCountAggregateOutputType | null
    _avg: DetalleVentaAvgAggregateOutputType | null
    _sum: DetalleVentaSumAggregateOutputType | null
    _min: DetalleVentaMinAggregateOutputType | null
    _max: DetalleVentaMaxAggregateOutputType | null
  }

  export type DetalleVentaAvgAggregateOutputType = {
    idDetalle: number | null
    precioUnitario: number | null
    cantidad: number | null
    precioTotal: number | null
    cantidadDevuelta: number | null
  }

  export type DetalleVentaSumAggregateOutputType = {
    idDetalle: number | null
    precioUnitario: number | null
    cantidad: number | null
    precioTotal: number | null
    cantidadDevuelta: number | null
  }

  export type DetalleVentaMinAggregateOutputType = {
    id: string | null
    idDetalle: number | null
    idProducto: string | null
    descripcionProducto: string | null
    precioUnitario: number | null
    cantidad: number | null
    precioTotal: number | null
    cantidadDevuelta: number | null
    estadoProducto: string | null
    observacion: string | null
    ventaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    detalleOriginalId: string | null
  }

  export type DetalleVentaMaxAggregateOutputType = {
    id: string | null
    idDetalle: number | null
    idProducto: string | null
    descripcionProducto: string | null
    precioUnitario: number | null
    cantidad: number | null
    precioTotal: number | null
    cantidadDevuelta: number | null
    estadoProducto: string | null
    observacion: string | null
    ventaId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    detalleOriginalId: string | null
  }

  export type DetalleVentaCountAggregateOutputType = {
    id: number
    idDetalle: number
    idProducto: number
    descripcionProducto: number
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta: number
    estadoProducto: number
    observacion: number
    ventaId: number
    createdAt: number
    updatedAt: number
    detalleOriginalId: number
    _all: number
  }


  export type DetalleVentaAvgAggregateInputType = {
    idDetalle?: true
    precioUnitario?: true
    cantidad?: true
    precioTotal?: true
    cantidadDevuelta?: true
  }

  export type DetalleVentaSumAggregateInputType = {
    idDetalle?: true
    precioUnitario?: true
    cantidad?: true
    precioTotal?: true
    cantidadDevuelta?: true
  }

  export type DetalleVentaMinAggregateInputType = {
    id?: true
    idDetalle?: true
    idProducto?: true
    descripcionProducto?: true
    precioUnitario?: true
    cantidad?: true
    precioTotal?: true
    cantidadDevuelta?: true
    estadoProducto?: true
    observacion?: true
    ventaId?: true
    createdAt?: true
    updatedAt?: true
    detalleOriginalId?: true
  }

  export type DetalleVentaMaxAggregateInputType = {
    id?: true
    idDetalle?: true
    idProducto?: true
    descripcionProducto?: true
    precioUnitario?: true
    cantidad?: true
    precioTotal?: true
    cantidadDevuelta?: true
    estadoProducto?: true
    observacion?: true
    ventaId?: true
    createdAt?: true
    updatedAt?: true
    detalleOriginalId?: true
  }

  export type DetalleVentaCountAggregateInputType = {
    id?: true
    idDetalle?: true
    idProducto?: true
    descripcionProducto?: true
    precioUnitario?: true
    cantidad?: true
    precioTotal?: true
    cantidadDevuelta?: true
    estadoProducto?: true
    observacion?: true
    ventaId?: true
    createdAt?: true
    updatedAt?: true
    detalleOriginalId?: true
    _all?: true
  }

  export type DetalleVentaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetalleVenta to aggregate.
     */
    where?: DetalleVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetalleVentas to fetch.
     */
    orderBy?: DetalleVentaOrderByWithRelationInput | DetalleVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DetalleVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetalleVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetalleVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DetalleVentas
    **/
    _count?: true | DetalleVentaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DetalleVentaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DetalleVentaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DetalleVentaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DetalleVentaMaxAggregateInputType
  }

  export type GetDetalleVentaAggregateType<T extends DetalleVentaAggregateArgs> = {
        [P in keyof T & keyof AggregateDetalleVenta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDetalleVenta[P]>
      : GetScalarType<T[P], AggregateDetalleVenta[P]>
  }




  export type DetalleVentaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DetalleVentaWhereInput
    orderBy?: DetalleVentaOrderByWithAggregationInput | DetalleVentaOrderByWithAggregationInput[]
    by: DetalleVentaScalarFieldEnum[] | DetalleVentaScalarFieldEnum
    having?: DetalleVentaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DetalleVentaCountAggregateInputType | true
    _avg?: DetalleVentaAvgAggregateInputType
    _sum?: DetalleVentaSumAggregateInputType
    _min?: DetalleVentaMinAggregateInputType
    _max?: DetalleVentaMaxAggregateInputType
  }

  export type DetalleVentaGroupByOutputType = {
    id: string
    idDetalle: number
    idProducto: string
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta: number | null
    estadoProducto: string | null
    observacion: string | null
    ventaId: string
    createdAt: Date
    updatedAt: Date
    detalleOriginalId: string | null
    _count: DetalleVentaCountAggregateOutputType | null
    _avg: DetalleVentaAvgAggregateOutputType | null
    _sum: DetalleVentaSumAggregateOutputType | null
    _min: DetalleVentaMinAggregateOutputType | null
    _max: DetalleVentaMaxAggregateOutputType | null
  }

  type GetDetalleVentaGroupByPayload<T extends DetalleVentaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DetalleVentaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DetalleVentaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DetalleVentaGroupByOutputType[P]>
            : GetScalarType<T[P], DetalleVentaGroupByOutputType[P]>
        }
      >
    >


  export type DetalleVentaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idDetalle?: boolean
    idProducto?: boolean
    descripcionProducto?: boolean
    precioUnitario?: boolean
    cantidad?: boolean
    precioTotal?: boolean
    cantidadDevuelta?: boolean
    estadoProducto?: boolean
    observacion?: boolean
    ventaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    detalleOriginalId?: boolean
    producto?: boolean | ProductDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
    detalleOriginal?: boolean | DetalleVenta$detalleOriginalArgs<ExtArgs>
    detallesDevoluciones?: boolean | DetalleVenta$detallesDevolucionesArgs<ExtArgs>
    _count?: boolean | DetalleVentaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["detalleVenta"]>


  export type DetalleVentaSelectScalar = {
    id?: boolean
    idDetalle?: boolean
    idProducto?: boolean
    descripcionProducto?: boolean
    precioUnitario?: boolean
    cantidad?: boolean
    precioTotal?: boolean
    cantidadDevuelta?: boolean
    estadoProducto?: boolean
    observacion?: boolean
    ventaId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    detalleOriginalId?: boolean
  }

  export type DetalleVentaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    producto?: boolean | ProductDefaultArgs<ExtArgs>
    venta?: boolean | VentaDefaultArgs<ExtArgs>
    detalleOriginal?: boolean | DetalleVenta$detalleOriginalArgs<ExtArgs>
    detallesDevoluciones?: boolean | DetalleVenta$detallesDevolucionesArgs<ExtArgs>
    _count?: boolean | DetalleVentaCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $DetalleVentaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DetalleVenta"
    objects: {
      producto: Prisma.$ProductPayload<ExtArgs>
      venta: Prisma.$VentaPayload<ExtArgs>
      detalleOriginal: Prisma.$DetalleVentaPayload<ExtArgs> | null
      detallesDevoluciones: Prisma.$DetalleVentaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      idDetalle: number
      idProducto: string
      descripcionProducto: string
      precioUnitario: number
      cantidad: number
      precioTotal: number
      cantidadDevuelta: number | null
      estadoProducto: string | null
      observacion: string | null
      ventaId: string
      createdAt: Date
      updatedAt: Date
      detalleOriginalId: string | null
    }, ExtArgs["result"]["detalleVenta"]>
    composites: {}
  }

  type DetalleVentaGetPayload<S extends boolean | null | undefined | DetalleVentaDefaultArgs> = $Result.GetResult<Prisma.$DetalleVentaPayload, S>

  type DetalleVentaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DetalleVentaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DetalleVentaCountAggregateInputType | true
    }

  export interface DetalleVentaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DetalleVenta'], meta: { name: 'DetalleVenta' } }
    /**
     * Find zero or one DetalleVenta that matches the filter.
     * @param {DetalleVentaFindUniqueArgs} args - Arguments to find a DetalleVenta
     * @example
     * // Get one DetalleVenta
     * const detalleVenta = await prisma.detalleVenta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DetalleVentaFindUniqueArgs>(args: SelectSubset<T, DetalleVentaFindUniqueArgs<ExtArgs>>): Prisma__DetalleVentaClient<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DetalleVenta that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DetalleVentaFindUniqueOrThrowArgs} args - Arguments to find a DetalleVenta
     * @example
     * // Get one DetalleVenta
     * const detalleVenta = await prisma.detalleVenta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DetalleVentaFindUniqueOrThrowArgs>(args: SelectSubset<T, DetalleVentaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DetalleVentaClient<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DetalleVenta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleVentaFindFirstArgs} args - Arguments to find a DetalleVenta
     * @example
     * // Get one DetalleVenta
     * const detalleVenta = await prisma.detalleVenta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DetalleVentaFindFirstArgs>(args?: SelectSubset<T, DetalleVentaFindFirstArgs<ExtArgs>>): Prisma__DetalleVentaClient<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DetalleVenta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleVentaFindFirstOrThrowArgs} args - Arguments to find a DetalleVenta
     * @example
     * // Get one DetalleVenta
     * const detalleVenta = await prisma.detalleVenta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DetalleVentaFindFirstOrThrowArgs>(args?: SelectSubset<T, DetalleVentaFindFirstOrThrowArgs<ExtArgs>>): Prisma__DetalleVentaClient<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DetalleVentas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleVentaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DetalleVentas
     * const detalleVentas = await prisma.detalleVenta.findMany()
     * 
     * // Get first 10 DetalleVentas
     * const detalleVentas = await prisma.detalleVenta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const detalleVentaWithIdOnly = await prisma.detalleVenta.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DetalleVentaFindManyArgs>(args?: SelectSubset<T, DetalleVentaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DetalleVenta.
     * @param {DetalleVentaCreateArgs} args - Arguments to create a DetalleVenta.
     * @example
     * // Create one DetalleVenta
     * const DetalleVenta = await prisma.detalleVenta.create({
     *   data: {
     *     // ... data to create a DetalleVenta
     *   }
     * })
     * 
     */
    create<T extends DetalleVentaCreateArgs>(args: SelectSubset<T, DetalleVentaCreateArgs<ExtArgs>>): Prisma__DetalleVentaClient<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DetalleVentas.
     * @param {DetalleVentaCreateManyArgs} args - Arguments to create many DetalleVentas.
     * @example
     * // Create many DetalleVentas
     * const detalleVenta = await prisma.detalleVenta.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DetalleVentaCreateManyArgs>(args?: SelectSubset<T, DetalleVentaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DetalleVenta.
     * @param {DetalleVentaDeleteArgs} args - Arguments to delete one DetalleVenta.
     * @example
     * // Delete one DetalleVenta
     * const DetalleVenta = await prisma.detalleVenta.delete({
     *   where: {
     *     // ... filter to delete one DetalleVenta
     *   }
     * })
     * 
     */
    delete<T extends DetalleVentaDeleteArgs>(args: SelectSubset<T, DetalleVentaDeleteArgs<ExtArgs>>): Prisma__DetalleVentaClient<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DetalleVenta.
     * @param {DetalleVentaUpdateArgs} args - Arguments to update one DetalleVenta.
     * @example
     * // Update one DetalleVenta
     * const detalleVenta = await prisma.detalleVenta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DetalleVentaUpdateArgs>(args: SelectSubset<T, DetalleVentaUpdateArgs<ExtArgs>>): Prisma__DetalleVentaClient<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DetalleVentas.
     * @param {DetalleVentaDeleteManyArgs} args - Arguments to filter DetalleVentas to delete.
     * @example
     * // Delete a few DetalleVentas
     * const { count } = await prisma.detalleVenta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DetalleVentaDeleteManyArgs>(args?: SelectSubset<T, DetalleVentaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DetalleVentas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleVentaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DetalleVentas
     * const detalleVenta = await prisma.detalleVenta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DetalleVentaUpdateManyArgs>(args: SelectSubset<T, DetalleVentaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DetalleVenta.
     * @param {DetalleVentaUpsertArgs} args - Arguments to update or create a DetalleVenta.
     * @example
     * // Update or create a DetalleVenta
     * const detalleVenta = await prisma.detalleVenta.upsert({
     *   create: {
     *     // ... data to create a DetalleVenta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DetalleVenta we want to update
     *   }
     * })
     */
    upsert<T extends DetalleVentaUpsertArgs>(args: SelectSubset<T, DetalleVentaUpsertArgs<ExtArgs>>): Prisma__DetalleVentaClient<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DetalleVentas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleVentaCountArgs} args - Arguments to filter DetalleVentas to count.
     * @example
     * // Count the number of DetalleVentas
     * const count = await prisma.detalleVenta.count({
     *   where: {
     *     // ... the filter for the DetalleVentas we want to count
     *   }
     * })
    **/
    count<T extends DetalleVentaCountArgs>(
      args?: Subset<T, DetalleVentaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DetalleVentaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DetalleVenta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleVentaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DetalleVentaAggregateArgs>(args: Subset<T, DetalleVentaAggregateArgs>): Prisma.PrismaPromise<GetDetalleVentaAggregateType<T>>

    /**
     * Group by DetalleVenta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DetalleVentaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DetalleVentaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DetalleVentaGroupByArgs['orderBy'] }
        : { orderBy?: DetalleVentaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DetalleVentaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDetalleVentaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DetalleVenta model
   */
  readonly fields: DetalleVentaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DetalleVenta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DetalleVentaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    producto<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    venta<T extends VentaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VentaDefaultArgs<ExtArgs>>): Prisma__VentaClient<$Result.GetResult<Prisma.$VentaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    detalleOriginal<T extends DetalleVenta$detalleOriginalArgs<ExtArgs> = {}>(args?: Subset<T, DetalleVenta$detalleOriginalArgs<ExtArgs>>): Prisma__DetalleVentaClient<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    detallesDevoluciones<T extends DetalleVenta$detallesDevolucionesArgs<ExtArgs> = {}>(args?: Subset<T, DetalleVenta$detallesDevolucionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DetalleVentaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DetalleVenta model
   */ 
  interface DetalleVentaFieldRefs {
    readonly id: FieldRef<"DetalleVenta", 'String'>
    readonly idDetalle: FieldRef<"DetalleVenta", 'Int'>
    readonly idProducto: FieldRef<"DetalleVenta", 'String'>
    readonly descripcionProducto: FieldRef<"DetalleVenta", 'String'>
    readonly precioUnitario: FieldRef<"DetalleVenta", 'Float'>
    readonly cantidad: FieldRef<"DetalleVenta", 'Int'>
    readonly precioTotal: FieldRef<"DetalleVenta", 'Float'>
    readonly cantidadDevuelta: FieldRef<"DetalleVenta", 'Int'>
    readonly estadoProducto: FieldRef<"DetalleVenta", 'String'>
    readonly observacion: FieldRef<"DetalleVenta", 'String'>
    readonly ventaId: FieldRef<"DetalleVenta", 'String'>
    readonly createdAt: FieldRef<"DetalleVenta", 'DateTime'>
    readonly updatedAt: FieldRef<"DetalleVenta", 'DateTime'>
    readonly detalleOriginalId: FieldRef<"DetalleVenta", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DetalleVenta findUnique
   */
  export type DetalleVentaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleVenta to fetch.
     */
    where: DetalleVentaWhereUniqueInput
  }

  /**
   * DetalleVenta findUniqueOrThrow
   */
  export type DetalleVentaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleVenta to fetch.
     */
    where: DetalleVentaWhereUniqueInput
  }

  /**
   * DetalleVenta findFirst
   */
  export type DetalleVentaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleVenta to fetch.
     */
    where?: DetalleVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetalleVentas to fetch.
     */
    orderBy?: DetalleVentaOrderByWithRelationInput | DetalleVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetalleVentas.
     */
    cursor?: DetalleVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetalleVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetalleVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetalleVentas.
     */
    distinct?: DetalleVentaScalarFieldEnum | DetalleVentaScalarFieldEnum[]
  }

  /**
   * DetalleVenta findFirstOrThrow
   */
  export type DetalleVentaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleVenta to fetch.
     */
    where?: DetalleVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetalleVentas to fetch.
     */
    orderBy?: DetalleVentaOrderByWithRelationInput | DetalleVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DetalleVentas.
     */
    cursor?: DetalleVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetalleVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetalleVentas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DetalleVentas.
     */
    distinct?: DetalleVentaScalarFieldEnum | DetalleVentaScalarFieldEnum[]
  }

  /**
   * DetalleVenta findMany
   */
  export type DetalleVentaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    /**
     * Filter, which DetalleVentas to fetch.
     */
    where?: DetalleVentaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DetalleVentas to fetch.
     */
    orderBy?: DetalleVentaOrderByWithRelationInput | DetalleVentaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DetalleVentas.
     */
    cursor?: DetalleVentaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DetalleVentas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DetalleVentas.
     */
    skip?: number
    distinct?: DetalleVentaScalarFieldEnum | DetalleVentaScalarFieldEnum[]
  }

  /**
   * DetalleVenta create
   */
  export type DetalleVentaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    /**
     * The data needed to create a DetalleVenta.
     */
    data: XOR<DetalleVentaCreateInput, DetalleVentaUncheckedCreateInput>
  }

  /**
   * DetalleVenta createMany
   */
  export type DetalleVentaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DetalleVentas.
     */
    data: DetalleVentaCreateManyInput | DetalleVentaCreateManyInput[]
  }

  /**
   * DetalleVenta update
   */
  export type DetalleVentaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    /**
     * The data needed to update a DetalleVenta.
     */
    data: XOR<DetalleVentaUpdateInput, DetalleVentaUncheckedUpdateInput>
    /**
     * Choose, which DetalleVenta to update.
     */
    where: DetalleVentaWhereUniqueInput
  }

  /**
   * DetalleVenta updateMany
   */
  export type DetalleVentaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DetalleVentas.
     */
    data: XOR<DetalleVentaUpdateManyMutationInput, DetalleVentaUncheckedUpdateManyInput>
    /**
     * Filter which DetalleVentas to update
     */
    where?: DetalleVentaWhereInput
  }

  /**
   * DetalleVenta upsert
   */
  export type DetalleVentaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    /**
     * The filter to search for the DetalleVenta to update in case it exists.
     */
    where: DetalleVentaWhereUniqueInput
    /**
     * In case the DetalleVenta found by the `where` argument doesn't exist, create a new DetalleVenta with this data.
     */
    create: XOR<DetalleVentaCreateInput, DetalleVentaUncheckedCreateInput>
    /**
     * In case the DetalleVenta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DetalleVentaUpdateInput, DetalleVentaUncheckedUpdateInput>
  }

  /**
   * DetalleVenta delete
   */
  export type DetalleVentaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    /**
     * Filter which DetalleVenta to delete.
     */
    where: DetalleVentaWhereUniqueInput
  }

  /**
   * DetalleVenta deleteMany
   */
  export type DetalleVentaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DetalleVentas to delete
     */
    where?: DetalleVentaWhereInput
  }

  /**
   * DetalleVenta.detalleOriginal
   */
  export type DetalleVenta$detalleOriginalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    where?: DetalleVentaWhereInput
  }

  /**
   * DetalleVenta.detallesDevoluciones
   */
  export type DetalleVenta$detallesDevolucionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
    where?: DetalleVentaWhereInput
    orderBy?: DetalleVentaOrderByWithRelationInput | DetalleVentaOrderByWithRelationInput[]
    cursor?: DetalleVentaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DetalleVentaScalarFieldEnum | DetalleVentaScalarFieldEnum[]
  }

  /**
   * DetalleVenta without action
   */
  export type DetalleVentaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DetalleVenta
     */
    select?: DetalleVentaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DetalleVentaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable',
    Snapshot: 'Snapshot'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    type: 'type',
    priceUSD: 'priceUSD',
    priceCLP: 'priceCLP',
    priceBRL: 'priceBRL',
    stock: 'stock',
    imageUrl: 'imageUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const LoginAttemptScalarFieldEnum: {
    id: 'id',
    ip: 'ip',
    email: 'email',
    attempts: 'attempts',
    blockedUntil: 'blockedUntil',
    lastAttempt: 'lastAttempt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type LoginAttemptScalarFieldEnum = (typeof LoginAttemptScalarFieldEnum)[keyof typeof LoginAttemptScalarFieldEnum]


  export const VentaScalarFieldEnum: {
    id: 'id',
    idVenta: 'idVenta',
    tipoTransaccion: 'tipoTransaccion',
    estadoVenta: 'estadoVenta',
    fecha: 'fecha',
    tipoMoneda: 'tipoMoneda',
    medioPago: 'medioPago',
    total: 'total',
    vuelto: 'vuelto',
    idCliente: 'idCliente',
    nombreCliente: 'nombreCliente',
    email: 'email',
    telefono: 'telefono',
    dni: 'dni',
    idVendedor: 'idVendedor',
    idVentaRelacionada: 'idVentaRelacionada',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VentaScalarFieldEnum = (typeof VentaScalarFieldEnum)[keyof typeof VentaScalarFieldEnum]


  export const DatosArriendoScalarFieldEnum: {
    id: 'id',
    fechaArriendo: 'fechaArriendo',
    fechaEntrega: 'fechaEntrega',
    patente: 'patente',
    ventaId: 'ventaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DatosArriendoScalarFieldEnum = (typeof DatosArriendoScalarFieldEnum)[keyof typeof DatosArriendoScalarFieldEnum]


  export const DetalleVentaScalarFieldEnum: {
    id: 'id',
    idDetalle: 'idDetalle',
    idProducto: 'idProducto',
    descripcionProducto: 'descripcionProducto',
    precioUnitario: 'precioUnitario',
    cantidad: 'cantidad',
    precioTotal: 'precioTotal',
    cantidadDevuelta: 'cantidadDevuelta',
    estadoProducto: 'estadoProducto',
    observacion: 'observacion',
    ventaId: 'ventaId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    detalleOriginalId: 'detalleOriginalId'
  };

  export type DetalleVentaScalarFieldEnum = (typeof DetalleVentaScalarFieldEnum)[keyof typeof DetalleVentaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    loginAttempts?: LoginAttemptListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loginAttempts?: LoginAttemptOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    loginAttempts?: LoginAttemptListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    description?: StringFilter<"Product"> | string
    type?: StringFilter<"Product"> | string
    priceUSD?: FloatFilter<"Product"> | number
    priceCLP?: FloatFilter<"Product"> | number
    priceBRL?: FloatFilter<"Product"> | number
    stock?: IntFilter<"Product"> | number
    imageUrl?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    detalleVenta?: DetalleVentaListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    priceUSD?: SortOrder
    priceCLP?: SortOrder
    priceBRL?: SortOrder
    stock?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    detalleVenta?: DetalleVentaOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    description?: StringFilter<"Product"> | string
    type?: StringFilter<"Product"> | string
    priceUSD?: FloatFilter<"Product"> | number
    priceCLP?: FloatFilter<"Product"> | number
    priceBRL?: FloatFilter<"Product"> | number
    stock?: IntFilter<"Product"> | number
    imageUrl?: StringNullableFilter<"Product"> | string | null
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    detalleVenta?: DetalleVentaListRelationFilter
  }, "id" | "name">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    priceUSD?: SortOrder
    priceCLP?: SortOrder
    priceBRL?: SortOrder
    stock?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringWithAggregatesFilter<"Product"> | string
    type?: StringWithAggregatesFilter<"Product"> | string
    priceUSD?: FloatWithAggregatesFilter<"Product"> | number
    priceCLP?: FloatWithAggregatesFilter<"Product"> | number
    priceBRL?: FloatWithAggregatesFilter<"Product"> | number
    stock?: IntWithAggregatesFilter<"Product"> | number
    imageUrl?: StringNullableWithAggregatesFilter<"Product"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type LoginAttemptWhereInput = {
    AND?: LoginAttemptWhereInput | LoginAttemptWhereInput[]
    OR?: LoginAttemptWhereInput[]
    NOT?: LoginAttemptWhereInput | LoginAttemptWhereInput[]
    id?: IntFilter<"LoginAttempt"> | number
    ip?: StringFilter<"LoginAttempt"> | string
    email?: StringFilter<"LoginAttempt"> | string
    attempts?: IntFilter<"LoginAttempt"> | number
    blockedUntil?: DateTimeNullableFilter<"LoginAttempt"> | Date | string | null
    lastAttempt?: DateTimeFilter<"LoginAttempt"> | Date | string
    createdAt?: DateTimeFilter<"LoginAttempt"> | Date | string
    updatedAt?: DateTimeFilter<"LoginAttempt"> | Date | string
    userId?: StringFilter<"LoginAttempt"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type LoginAttemptOrderByWithRelationInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    attempts?: SortOrder
    blockedUntil?: SortOrderInput | SortOrder
    lastAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type LoginAttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    ip_email?: LoginAttemptIpEmailCompoundUniqueInput
    AND?: LoginAttemptWhereInput | LoginAttemptWhereInput[]
    OR?: LoginAttemptWhereInput[]
    NOT?: LoginAttemptWhereInput | LoginAttemptWhereInput[]
    ip?: StringFilter<"LoginAttempt"> | string
    email?: StringFilter<"LoginAttempt"> | string
    attempts?: IntFilter<"LoginAttempt"> | number
    blockedUntil?: DateTimeNullableFilter<"LoginAttempt"> | Date | string | null
    lastAttempt?: DateTimeFilter<"LoginAttempt"> | Date | string
    createdAt?: DateTimeFilter<"LoginAttempt"> | Date | string
    updatedAt?: DateTimeFilter<"LoginAttempt"> | Date | string
    userId?: StringFilter<"LoginAttempt"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "ip_email">

  export type LoginAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    attempts?: SortOrder
    blockedUntil?: SortOrderInput | SortOrder
    lastAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: LoginAttemptCountOrderByAggregateInput
    _avg?: LoginAttemptAvgOrderByAggregateInput
    _max?: LoginAttemptMaxOrderByAggregateInput
    _min?: LoginAttemptMinOrderByAggregateInput
    _sum?: LoginAttemptSumOrderByAggregateInput
  }

  export type LoginAttemptScalarWhereWithAggregatesInput = {
    AND?: LoginAttemptScalarWhereWithAggregatesInput | LoginAttemptScalarWhereWithAggregatesInput[]
    OR?: LoginAttemptScalarWhereWithAggregatesInput[]
    NOT?: LoginAttemptScalarWhereWithAggregatesInput | LoginAttemptScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LoginAttempt"> | number
    ip?: StringWithAggregatesFilter<"LoginAttempt"> | string
    email?: StringWithAggregatesFilter<"LoginAttempt"> | string
    attempts?: IntWithAggregatesFilter<"LoginAttempt"> | number
    blockedUntil?: DateTimeNullableWithAggregatesFilter<"LoginAttempt"> | Date | string | null
    lastAttempt?: DateTimeWithAggregatesFilter<"LoginAttempt"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"LoginAttempt"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LoginAttempt"> | Date | string
    userId?: StringWithAggregatesFilter<"LoginAttempt"> | string
  }

  export type VentaWhereInput = {
    AND?: VentaWhereInput | VentaWhereInput[]
    OR?: VentaWhereInput[]
    NOT?: VentaWhereInput | VentaWhereInput[]
    id?: StringFilter<"Venta"> | string
    idVenta?: StringFilter<"Venta"> | string
    tipoTransaccion?: StringFilter<"Venta"> | string
    estadoVenta?: StringFilter<"Venta"> | string
    fecha?: DateTimeFilter<"Venta"> | Date | string
    tipoMoneda?: StringFilter<"Venta"> | string
    medioPago?: StringFilter<"Venta"> | string
    total?: FloatFilter<"Venta"> | number
    vuelto?: FloatNullableFilter<"Venta"> | number | null
    idCliente?: StringFilter<"Venta"> | string
    nombreCliente?: StringFilter<"Venta"> | string
    email?: StringFilter<"Venta"> | string
    telefono?: StringFilter<"Venta"> | string
    dni?: StringFilter<"Venta"> | string
    idVendedor?: StringFilter<"Venta"> | string
    idVentaRelacionada?: StringNullableFilter<"Venta"> | string | null
    createdAt?: DateTimeFilter<"Venta"> | Date | string
    updatedAt?: DateTimeFilter<"Venta"> | Date | string
    ventaRelacionada?: XOR<VentaNullableRelationFilter, VentaWhereInput> | null
    ventasDevolucion?: VentaListRelationFilter
    datosArriendo?: XOR<DatosArriendoNullableRelationFilter, DatosArriendoWhereInput> | null
    detalleVenta?: DetalleVentaListRelationFilter
  }

  export type VentaOrderByWithRelationInput = {
    id?: SortOrder
    idVenta?: SortOrder
    tipoTransaccion?: SortOrder
    estadoVenta?: SortOrder
    fecha?: SortOrder
    tipoMoneda?: SortOrder
    medioPago?: SortOrder
    total?: SortOrder
    vuelto?: SortOrderInput | SortOrder
    idCliente?: SortOrder
    nombreCliente?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    dni?: SortOrder
    idVendedor?: SortOrder
    idVentaRelacionada?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ventaRelacionada?: VentaOrderByWithRelationInput
    ventasDevolucion?: VentaOrderByRelationAggregateInput
    datosArriendo?: DatosArriendoOrderByWithRelationInput
    detalleVenta?: DetalleVentaOrderByRelationAggregateInput
  }

  export type VentaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    idVenta?: string
    AND?: VentaWhereInput | VentaWhereInput[]
    OR?: VentaWhereInput[]
    NOT?: VentaWhereInput | VentaWhereInput[]
    tipoTransaccion?: StringFilter<"Venta"> | string
    estadoVenta?: StringFilter<"Venta"> | string
    fecha?: DateTimeFilter<"Venta"> | Date | string
    tipoMoneda?: StringFilter<"Venta"> | string
    medioPago?: StringFilter<"Venta"> | string
    total?: FloatFilter<"Venta"> | number
    vuelto?: FloatNullableFilter<"Venta"> | number | null
    idCliente?: StringFilter<"Venta"> | string
    nombreCliente?: StringFilter<"Venta"> | string
    email?: StringFilter<"Venta"> | string
    telefono?: StringFilter<"Venta"> | string
    dni?: StringFilter<"Venta"> | string
    idVendedor?: StringFilter<"Venta"> | string
    idVentaRelacionada?: StringNullableFilter<"Venta"> | string | null
    createdAt?: DateTimeFilter<"Venta"> | Date | string
    updatedAt?: DateTimeFilter<"Venta"> | Date | string
    ventaRelacionada?: XOR<VentaNullableRelationFilter, VentaWhereInput> | null
    ventasDevolucion?: VentaListRelationFilter
    datosArriendo?: XOR<DatosArriendoNullableRelationFilter, DatosArriendoWhereInput> | null
    detalleVenta?: DetalleVentaListRelationFilter
  }, "id" | "idVenta">

  export type VentaOrderByWithAggregationInput = {
    id?: SortOrder
    idVenta?: SortOrder
    tipoTransaccion?: SortOrder
    estadoVenta?: SortOrder
    fecha?: SortOrder
    tipoMoneda?: SortOrder
    medioPago?: SortOrder
    total?: SortOrder
    vuelto?: SortOrderInput | SortOrder
    idCliente?: SortOrder
    nombreCliente?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    dni?: SortOrder
    idVendedor?: SortOrder
    idVentaRelacionada?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VentaCountOrderByAggregateInput
    _avg?: VentaAvgOrderByAggregateInput
    _max?: VentaMaxOrderByAggregateInput
    _min?: VentaMinOrderByAggregateInput
    _sum?: VentaSumOrderByAggregateInput
  }

  export type VentaScalarWhereWithAggregatesInput = {
    AND?: VentaScalarWhereWithAggregatesInput | VentaScalarWhereWithAggregatesInput[]
    OR?: VentaScalarWhereWithAggregatesInput[]
    NOT?: VentaScalarWhereWithAggregatesInput | VentaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Venta"> | string
    idVenta?: StringWithAggregatesFilter<"Venta"> | string
    tipoTransaccion?: StringWithAggregatesFilter<"Venta"> | string
    estadoVenta?: StringWithAggregatesFilter<"Venta"> | string
    fecha?: DateTimeWithAggregatesFilter<"Venta"> | Date | string
    tipoMoneda?: StringWithAggregatesFilter<"Venta"> | string
    medioPago?: StringWithAggregatesFilter<"Venta"> | string
    total?: FloatWithAggregatesFilter<"Venta"> | number
    vuelto?: FloatNullableWithAggregatesFilter<"Venta"> | number | null
    idCliente?: StringWithAggregatesFilter<"Venta"> | string
    nombreCliente?: StringWithAggregatesFilter<"Venta"> | string
    email?: StringWithAggregatesFilter<"Venta"> | string
    telefono?: StringWithAggregatesFilter<"Venta"> | string
    dni?: StringWithAggregatesFilter<"Venta"> | string
    idVendedor?: StringWithAggregatesFilter<"Venta"> | string
    idVentaRelacionada?: StringNullableWithAggregatesFilter<"Venta"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Venta"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Venta"> | Date | string
  }

  export type DatosArriendoWhereInput = {
    AND?: DatosArriendoWhereInput | DatosArriendoWhereInput[]
    OR?: DatosArriendoWhereInput[]
    NOT?: DatosArriendoWhereInput | DatosArriendoWhereInput[]
    id?: StringFilter<"DatosArriendo"> | string
    fechaArriendo?: DateTimeFilter<"DatosArriendo"> | Date | string
    fechaEntrega?: DateTimeFilter<"DatosArriendo"> | Date | string
    patente?: StringFilter<"DatosArriendo"> | string
    ventaId?: StringFilter<"DatosArriendo"> | string
    createdAt?: DateTimeFilter<"DatosArriendo"> | Date | string
    updatedAt?: DateTimeFilter<"DatosArriendo"> | Date | string
    venta?: XOR<VentaRelationFilter, VentaWhereInput>
  }

  export type DatosArriendoOrderByWithRelationInput = {
    id?: SortOrder
    fechaArriendo?: SortOrder
    fechaEntrega?: SortOrder
    patente?: SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    venta?: VentaOrderByWithRelationInput
  }

  export type DatosArriendoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    ventaId?: string
    AND?: DatosArriendoWhereInput | DatosArriendoWhereInput[]
    OR?: DatosArriendoWhereInput[]
    NOT?: DatosArriendoWhereInput | DatosArriendoWhereInput[]
    fechaArriendo?: DateTimeFilter<"DatosArriendo"> | Date | string
    fechaEntrega?: DateTimeFilter<"DatosArriendo"> | Date | string
    patente?: StringFilter<"DatosArriendo"> | string
    createdAt?: DateTimeFilter<"DatosArriendo"> | Date | string
    updatedAt?: DateTimeFilter<"DatosArriendo"> | Date | string
    venta?: XOR<VentaRelationFilter, VentaWhereInput>
  }, "id" | "ventaId">

  export type DatosArriendoOrderByWithAggregationInput = {
    id?: SortOrder
    fechaArriendo?: SortOrder
    fechaEntrega?: SortOrder
    patente?: SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DatosArriendoCountOrderByAggregateInput
    _max?: DatosArriendoMaxOrderByAggregateInput
    _min?: DatosArriendoMinOrderByAggregateInput
  }

  export type DatosArriendoScalarWhereWithAggregatesInput = {
    AND?: DatosArriendoScalarWhereWithAggregatesInput | DatosArriendoScalarWhereWithAggregatesInput[]
    OR?: DatosArriendoScalarWhereWithAggregatesInput[]
    NOT?: DatosArriendoScalarWhereWithAggregatesInput | DatosArriendoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DatosArriendo"> | string
    fechaArriendo?: DateTimeWithAggregatesFilter<"DatosArriendo"> | Date | string
    fechaEntrega?: DateTimeWithAggregatesFilter<"DatosArriendo"> | Date | string
    patente?: StringWithAggregatesFilter<"DatosArriendo"> | string
    ventaId?: StringWithAggregatesFilter<"DatosArriendo"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DatosArriendo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DatosArriendo"> | Date | string
  }

  export type DetalleVentaWhereInput = {
    AND?: DetalleVentaWhereInput | DetalleVentaWhereInput[]
    OR?: DetalleVentaWhereInput[]
    NOT?: DetalleVentaWhereInput | DetalleVentaWhereInput[]
    id?: StringFilter<"DetalleVenta"> | string
    idDetalle?: IntFilter<"DetalleVenta"> | number
    idProducto?: StringFilter<"DetalleVenta"> | string
    descripcionProducto?: StringFilter<"DetalleVenta"> | string
    precioUnitario?: FloatFilter<"DetalleVenta"> | number
    cantidad?: IntFilter<"DetalleVenta"> | number
    precioTotal?: FloatFilter<"DetalleVenta"> | number
    cantidadDevuelta?: IntNullableFilter<"DetalleVenta"> | number | null
    estadoProducto?: StringNullableFilter<"DetalleVenta"> | string | null
    observacion?: StringNullableFilter<"DetalleVenta"> | string | null
    ventaId?: StringFilter<"DetalleVenta"> | string
    createdAt?: DateTimeFilter<"DetalleVenta"> | Date | string
    updatedAt?: DateTimeFilter<"DetalleVenta"> | Date | string
    detalleOriginalId?: StringNullableFilter<"DetalleVenta"> | string | null
    producto?: XOR<ProductRelationFilter, ProductWhereInput>
    venta?: XOR<VentaRelationFilter, VentaWhereInput>
    detalleOriginal?: XOR<DetalleVentaNullableRelationFilter, DetalleVentaWhereInput> | null
    detallesDevoluciones?: DetalleVentaListRelationFilter
  }

  export type DetalleVentaOrderByWithRelationInput = {
    id?: SortOrder
    idDetalle?: SortOrder
    idProducto?: SortOrder
    descripcionProducto?: SortOrder
    precioUnitario?: SortOrder
    cantidad?: SortOrder
    precioTotal?: SortOrder
    cantidadDevuelta?: SortOrderInput | SortOrder
    estadoProducto?: SortOrderInput | SortOrder
    observacion?: SortOrderInput | SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    detalleOriginalId?: SortOrderInput | SortOrder
    producto?: ProductOrderByWithRelationInput
    venta?: VentaOrderByWithRelationInput
    detalleOriginal?: DetalleVentaOrderByWithRelationInput
    detallesDevoluciones?: DetalleVentaOrderByRelationAggregateInput
  }

  export type DetalleVentaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    ventaId_idDetalle?: DetalleVentaVentaIdIdDetalleCompoundUniqueInput
    AND?: DetalleVentaWhereInput | DetalleVentaWhereInput[]
    OR?: DetalleVentaWhereInput[]
    NOT?: DetalleVentaWhereInput | DetalleVentaWhereInput[]
    idDetalle?: IntFilter<"DetalleVenta"> | number
    idProducto?: StringFilter<"DetalleVenta"> | string
    descripcionProducto?: StringFilter<"DetalleVenta"> | string
    precioUnitario?: FloatFilter<"DetalleVenta"> | number
    cantidad?: IntFilter<"DetalleVenta"> | number
    precioTotal?: FloatFilter<"DetalleVenta"> | number
    cantidadDevuelta?: IntNullableFilter<"DetalleVenta"> | number | null
    estadoProducto?: StringNullableFilter<"DetalleVenta"> | string | null
    observacion?: StringNullableFilter<"DetalleVenta"> | string | null
    ventaId?: StringFilter<"DetalleVenta"> | string
    createdAt?: DateTimeFilter<"DetalleVenta"> | Date | string
    updatedAt?: DateTimeFilter<"DetalleVenta"> | Date | string
    detalleOriginalId?: StringNullableFilter<"DetalleVenta"> | string | null
    producto?: XOR<ProductRelationFilter, ProductWhereInput>
    venta?: XOR<VentaRelationFilter, VentaWhereInput>
    detalleOriginal?: XOR<DetalleVentaNullableRelationFilter, DetalleVentaWhereInput> | null
    detallesDevoluciones?: DetalleVentaListRelationFilter
  }, "id" | "ventaId_idDetalle">

  export type DetalleVentaOrderByWithAggregationInput = {
    id?: SortOrder
    idDetalle?: SortOrder
    idProducto?: SortOrder
    descripcionProducto?: SortOrder
    precioUnitario?: SortOrder
    cantidad?: SortOrder
    precioTotal?: SortOrder
    cantidadDevuelta?: SortOrderInput | SortOrder
    estadoProducto?: SortOrderInput | SortOrder
    observacion?: SortOrderInput | SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    detalleOriginalId?: SortOrderInput | SortOrder
    _count?: DetalleVentaCountOrderByAggregateInput
    _avg?: DetalleVentaAvgOrderByAggregateInput
    _max?: DetalleVentaMaxOrderByAggregateInput
    _min?: DetalleVentaMinOrderByAggregateInput
    _sum?: DetalleVentaSumOrderByAggregateInput
  }

  export type DetalleVentaScalarWhereWithAggregatesInput = {
    AND?: DetalleVentaScalarWhereWithAggregatesInput | DetalleVentaScalarWhereWithAggregatesInput[]
    OR?: DetalleVentaScalarWhereWithAggregatesInput[]
    NOT?: DetalleVentaScalarWhereWithAggregatesInput | DetalleVentaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DetalleVenta"> | string
    idDetalle?: IntWithAggregatesFilter<"DetalleVenta"> | number
    idProducto?: StringWithAggregatesFilter<"DetalleVenta"> | string
    descripcionProducto?: StringWithAggregatesFilter<"DetalleVenta"> | string
    precioUnitario?: FloatWithAggregatesFilter<"DetalleVenta"> | number
    cantidad?: IntWithAggregatesFilter<"DetalleVenta"> | number
    precioTotal?: FloatWithAggregatesFilter<"DetalleVenta"> | number
    cantidadDevuelta?: IntNullableWithAggregatesFilter<"DetalleVenta"> | number | null
    estadoProducto?: StringNullableWithAggregatesFilter<"DetalleVenta"> | string | null
    observacion?: StringNullableWithAggregatesFilter<"DetalleVenta"> | string | null
    ventaId?: StringWithAggregatesFilter<"DetalleVenta"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DetalleVenta"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DetalleVenta"> | Date | string
    detalleOriginalId?: StringNullableWithAggregatesFilter<"DetalleVenta"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: LoginAttemptCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    loginAttempts?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: LoginAttemptUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loginAttempts?: LoginAttemptUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    description: string
    type: string
    priceUSD: number
    priceCLP: number
    priceBRL: number
    stock: number
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    detalleVenta?: DetalleVentaCreateNestedManyWithoutProductoInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    type: string
    priceUSD: number
    priceCLP: number
    priceBRL: number
    stock: number
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    detalleVenta?: DetalleVentaUncheckedCreateNestedManyWithoutProductoInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priceUSD?: FloatFieldUpdateOperationsInput | number
    priceCLP?: FloatFieldUpdateOperationsInput | number
    priceBRL?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detalleVenta?: DetalleVentaUpdateManyWithoutProductoNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priceUSD?: FloatFieldUpdateOperationsInput | number
    priceCLP?: FloatFieldUpdateOperationsInput | number
    priceBRL?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detalleVenta?: DetalleVentaUncheckedUpdateManyWithoutProductoNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    description: string
    type: string
    priceUSD: number
    priceCLP: number
    priceBRL: number
    stock: number
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priceUSD?: FloatFieldUpdateOperationsInput | number
    priceCLP?: FloatFieldUpdateOperationsInput | number
    priceBRL?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priceUSD?: FloatFieldUpdateOperationsInput | number
    priceCLP?: FloatFieldUpdateOperationsInput | number
    priceBRL?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginAttemptCreateInput = {
    ip: string
    email: string
    attempts?: number
    blockedUntil?: Date | string | null
    lastAttempt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutLoginAttemptsInput
  }

  export type LoginAttemptUncheckedCreateInput = {
    id?: number
    ip: string
    email: string
    attempts?: number
    blockedUntil?: Date | string | null
    lastAttempt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type LoginAttemptUpdateInput = {
    ip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    blockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLoginAttemptsNestedInput
  }

  export type LoginAttemptUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    blockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LoginAttemptCreateManyInput = {
    ip: string
    email: string
    attempts?: number
    blockedUntil?: Date | string | null
    lastAttempt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type LoginAttemptUpdateManyMutationInput = {
    ip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    blockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginAttemptUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    blockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type VentaCreateInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ventaRelacionada?: VentaCreateNestedOneWithoutVentasDevolucionInput
    ventasDevolucion?: VentaCreateNestedManyWithoutVentaRelacionadaInput
    datosArriendo?: DatosArriendoCreateNestedOneWithoutVentaInput
    detalleVenta?: DetalleVentaCreateNestedManyWithoutVentaInput
  }

  export type VentaUncheckedCreateInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    idVentaRelacionada?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ventasDevolucion?: VentaUncheckedCreateNestedManyWithoutVentaRelacionadaInput
    datosArriendo?: DatosArriendoUncheckedCreateNestedOneWithoutVentaInput
    detalleVenta?: DetalleVentaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ventaRelacionada?: VentaUpdateOneWithoutVentasDevolucionNestedInput
    ventasDevolucion?: VentaUpdateManyWithoutVentaRelacionadaNestedInput
    datosArriendo?: DatosArriendoUpdateOneWithoutVentaNestedInput
    detalleVenta?: DetalleVentaUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    idVentaRelacionada?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ventasDevolucion?: VentaUncheckedUpdateManyWithoutVentaRelacionadaNestedInput
    datosArriendo?: DatosArriendoUncheckedUpdateOneWithoutVentaNestedInput
    detalleVenta?: DetalleVentaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type VentaCreateManyInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    idVentaRelacionada?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VentaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VentaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    idVentaRelacionada?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatosArriendoCreateInput = {
    id?: string
    fechaArriendo: Date | string
    fechaEntrega: Date | string
    patente: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venta: VentaCreateNestedOneWithoutDatosArriendoInput
  }

  export type DatosArriendoUncheckedCreateInput = {
    id?: string
    fechaArriendo: Date | string
    fechaEntrega: Date | string
    patente: string
    ventaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatosArriendoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaArriendo?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    patente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venta?: VentaUpdateOneRequiredWithoutDatosArriendoNestedInput
  }

  export type DatosArriendoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaArriendo?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    patente?: StringFieldUpdateOperationsInput | string
    ventaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatosArriendoCreateManyInput = {
    id?: string
    fechaArriendo: Date | string
    fechaEntrega: Date | string
    patente: string
    ventaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatosArriendoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaArriendo?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    patente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatosArriendoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaArriendo?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    patente?: StringFieldUpdateOperationsInput | string
    ventaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetalleVentaCreateInput = {
    id?: string
    idDetalle: number
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    producto: ProductCreateNestedOneWithoutDetalleVentaInput
    venta: VentaCreateNestedOneWithoutDetalleVentaInput
    detalleOriginal?: DetalleVentaCreateNestedOneWithoutDetallesDevolucionesInput
    detallesDevoluciones?: DetalleVentaCreateNestedManyWithoutDetalleOriginalInput
  }

  export type DetalleVentaUncheckedCreateInput = {
    id?: string
    idDetalle: number
    idProducto: string
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    ventaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    detalleOriginalId?: string | null
    detallesDevoluciones?: DetalleVentaUncheckedCreateNestedManyWithoutDetalleOriginalInput
  }

  export type DetalleVentaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    producto?: ProductUpdateOneRequiredWithoutDetalleVentaNestedInput
    venta?: VentaUpdateOneRequiredWithoutDetalleVentaNestedInput
    detalleOriginal?: DetalleVentaUpdateOneWithoutDetallesDevolucionesNestedInput
    detallesDevoluciones?: DetalleVentaUpdateManyWithoutDetalleOriginalNestedInput
  }

  export type DetalleVentaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    idProducto?: StringFieldUpdateOperationsInput | string
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detalleOriginalId?: NullableStringFieldUpdateOperationsInput | string | null
    detallesDevoluciones?: DetalleVentaUncheckedUpdateManyWithoutDetalleOriginalNestedInput
  }

  export type DetalleVentaCreateManyInput = {
    id?: string
    idDetalle: number
    idProducto: string
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    ventaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    detalleOriginalId?: string | null
  }

  export type DetalleVentaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetalleVentaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    idProducto?: StringFieldUpdateOperationsInput | string
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detalleOriginalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type LoginAttemptListRelationFilter = {
    every?: LoginAttemptWhereInput
    some?: LoginAttemptWhereInput
    none?: LoginAttemptWhereInput
  }

  export type LoginAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DetalleVentaListRelationFilter = {
    every?: DetalleVentaWhereInput
    some?: DetalleVentaWhereInput
    none?: DetalleVentaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type DetalleVentaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    priceUSD?: SortOrder
    priceCLP?: SortOrder
    priceBRL?: SortOrder
    stock?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    priceUSD?: SortOrder
    priceCLP?: SortOrder
    priceBRL?: SortOrder
    stock?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    priceUSD?: SortOrder
    priceCLP?: SortOrder
    priceBRL?: SortOrder
    stock?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    priceUSD?: SortOrder
    priceCLP?: SortOrder
    priceBRL?: SortOrder
    stock?: SortOrder
    imageUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    priceUSD?: SortOrder
    priceCLP?: SortOrder
    priceBRL?: SortOrder
    stock?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type LoginAttemptIpEmailCompoundUniqueInput = {
    ip: string
    email: string
  }

  export type LoginAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    attempts?: SortOrder
    blockedUntil?: SortOrder
    lastAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type LoginAttemptAvgOrderByAggregateInput = {
    id?: SortOrder
    attempts?: SortOrder
  }

  export type LoginAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    attempts?: SortOrder
    blockedUntil?: SortOrder
    lastAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type LoginAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    email?: SortOrder
    attempts?: SortOrder
    blockedUntil?: SortOrder
    lastAttempt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type LoginAttemptSumOrderByAggregateInput = {
    id?: SortOrder
    attempts?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type VentaNullableRelationFilter = {
    is?: VentaWhereInput | null
    isNot?: VentaWhereInput | null
  }

  export type VentaListRelationFilter = {
    every?: VentaWhereInput
    some?: VentaWhereInput
    none?: VentaWhereInput
  }

  export type DatosArriendoNullableRelationFilter = {
    is?: DatosArriendoWhereInput | null
    isNot?: DatosArriendoWhereInput | null
  }

  export type VentaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VentaCountOrderByAggregateInput = {
    id?: SortOrder
    idVenta?: SortOrder
    tipoTransaccion?: SortOrder
    estadoVenta?: SortOrder
    fecha?: SortOrder
    tipoMoneda?: SortOrder
    medioPago?: SortOrder
    total?: SortOrder
    vuelto?: SortOrder
    idCliente?: SortOrder
    nombreCliente?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    dni?: SortOrder
    idVendedor?: SortOrder
    idVentaRelacionada?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VentaAvgOrderByAggregateInput = {
    total?: SortOrder
    vuelto?: SortOrder
  }

  export type VentaMaxOrderByAggregateInput = {
    id?: SortOrder
    idVenta?: SortOrder
    tipoTransaccion?: SortOrder
    estadoVenta?: SortOrder
    fecha?: SortOrder
    tipoMoneda?: SortOrder
    medioPago?: SortOrder
    total?: SortOrder
    vuelto?: SortOrder
    idCliente?: SortOrder
    nombreCliente?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    dni?: SortOrder
    idVendedor?: SortOrder
    idVentaRelacionada?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VentaMinOrderByAggregateInput = {
    id?: SortOrder
    idVenta?: SortOrder
    tipoTransaccion?: SortOrder
    estadoVenta?: SortOrder
    fecha?: SortOrder
    tipoMoneda?: SortOrder
    medioPago?: SortOrder
    total?: SortOrder
    vuelto?: SortOrder
    idCliente?: SortOrder
    nombreCliente?: SortOrder
    email?: SortOrder
    telefono?: SortOrder
    dni?: SortOrder
    idVendedor?: SortOrder
    idVentaRelacionada?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VentaSumOrderByAggregateInput = {
    total?: SortOrder
    vuelto?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type VentaRelationFilter = {
    is?: VentaWhereInput
    isNot?: VentaWhereInput
  }

  export type DatosArriendoCountOrderByAggregateInput = {
    id?: SortOrder
    fechaArriendo?: SortOrder
    fechaEntrega?: SortOrder
    patente?: SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DatosArriendoMaxOrderByAggregateInput = {
    id?: SortOrder
    fechaArriendo?: SortOrder
    fechaEntrega?: SortOrder
    patente?: SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DatosArriendoMinOrderByAggregateInput = {
    id?: SortOrder
    fechaArriendo?: SortOrder
    fechaEntrega?: SortOrder
    patente?: SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type DetalleVentaNullableRelationFilter = {
    is?: DetalleVentaWhereInput | null
    isNot?: DetalleVentaWhereInput | null
  }

  export type DetalleVentaVentaIdIdDetalleCompoundUniqueInput = {
    ventaId: string
    idDetalle: number
  }

  export type DetalleVentaCountOrderByAggregateInput = {
    id?: SortOrder
    idDetalle?: SortOrder
    idProducto?: SortOrder
    descripcionProducto?: SortOrder
    precioUnitario?: SortOrder
    cantidad?: SortOrder
    precioTotal?: SortOrder
    cantidadDevuelta?: SortOrder
    estadoProducto?: SortOrder
    observacion?: SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    detalleOriginalId?: SortOrder
  }

  export type DetalleVentaAvgOrderByAggregateInput = {
    idDetalle?: SortOrder
    precioUnitario?: SortOrder
    cantidad?: SortOrder
    precioTotal?: SortOrder
    cantidadDevuelta?: SortOrder
  }

  export type DetalleVentaMaxOrderByAggregateInput = {
    id?: SortOrder
    idDetalle?: SortOrder
    idProducto?: SortOrder
    descripcionProducto?: SortOrder
    precioUnitario?: SortOrder
    cantidad?: SortOrder
    precioTotal?: SortOrder
    cantidadDevuelta?: SortOrder
    estadoProducto?: SortOrder
    observacion?: SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    detalleOriginalId?: SortOrder
  }

  export type DetalleVentaMinOrderByAggregateInput = {
    id?: SortOrder
    idDetalle?: SortOrder
    idProducto?: SortOrder
    descripcionProducto?: SortOrder
    precioUnitario?: SortOrder
    cantidad?: SortOrder
    precioTotal?: SortOrder
    cantidadDevuelta?: SortOrder
    estadoProducto?: SortOrder
    observacion?: SortOrder
    ventaId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    detalleOriginalId?: SortOrder
  }

  export type DetalleVentaSumOrderByAggregateInput = {
    idDetalle?: SortOrder
    precioUnitario?: SortOrder
    cantidad?: SortOrder
    precioTotal?: SortOrder
    cantidadDevuelta?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LoginAttemptCreateNestedManyWithoutUserInput = {
    create?: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput> | LoginAttemptCreateWithoutUserInput[] | LoginAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginAttemptCreateOrConnectWithoutUserInput | LoginAttemptCreateOrConnectWithoutUserInput[]
    createMany?: LoginAttemptCreateManyUserInputEnvelope
    connect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
  }

  export type LoginAttemptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput> | LoginAttemptCreateWithoutUserInput[] | LoginAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginAttemptCreateOrConnectWithoutUserInput | LoginAttemptCreateOrConnectWithoutUserInput[]
    createMany?: LoginAttemptCreateManyUserInputEnvelope
    connect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LoginAttemptUpdateManyWithoutUserNestedInput = {
    create?: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput> | LoginAttemptCreateWithoutUserInput[] | LoginAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginAttemptCreateOrConnectWithoutUserInput | LoginAttemptCreateOrConnectWithoutUserInput[]
    upsert?: LoginAttemptUpsertWithWhereUniqueWithoutUserInput | LoginAttemptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LoginAttemptCreateManyUserInputEnvelope
    set?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    disconnect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    delete?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    connect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    update?: LoginAttemptUpdateWithWhereUniqueWithoutUserInput | LoginAttemptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LoginAttemptUpdateManyWithWhereWithoutUserInput | LoginAttemptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LoginAttemptScalarWhereInput | LoginAttemptScalarWhereInput[]
  }

  export type LoginAttemptUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput> | LoginAttemptCreateWithoutUserInput[] | LoginAttemptUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LoginAttemptCreateOrConnectWithoutUserInput | LoginAttemptCreateOrConnectWithoutUserInput[]
    upsert?: LoginAttemptUpsertWithWhereUniqueWithoutUserInput | LoginAttemptUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LoginAttemptCreateManyUserInputEnvelope
    set?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    disconnect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    delete?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    connect?: LoginAttemptWhereUniqueInput | LoginAttemptWhereUniqueInput[]
    update?: LoginAttemptUpdateWithWhereUniqueWithoutUserInput | LoginAttemptUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LoginAttemptUpdateManyWithWhereWithoutUserInput | LoginAttemptUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LoginAttemptScalarWhereInput | LoginAttemptScalarWhereInput[]
  }

  export type DetalleVentaCreateNestedManyWithoutProductoInput = {
    create?: XOR<DetalleVentaCreateWithoutProductoInput, DetalleVentaUncheckedCreateWithoutProductoInput> | DetalleVentaCreateWithoutProductoInput[] | DetalleVentaUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutProductoInput | DetalleVentaCreateOrConnectWithoutProductoInput[]
    createMany?: DetalleVentaCreateManyProductoInputEnvelope
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
  }

  export type DetalleVentaUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<DetalleVentaCreateWithoutProductoInput, DetalleVentaUncheckedCreateWithoutProductoInput> | DetalleVentaCreateWithoutProductoInput[] | DetalleVentaUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutProductoInput | DetalleVentaCreateOrConnectWithoutProductoInput[]
    createMany?: DetalleVentaCreateManyProductoInputEnvelope
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DetalleVentaUpdateManyWithoutProductoNestedInput = {
    create?: XOR<DetalleVentaCreateWithoutProductoInput, DetalleVentaUncheckedCreateWithoutProductoInput> | DetalleVentaCreateWithoutProductoInput[] | DetalleVentaUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutProductoInput | DetalleVentaCreateOrConnectWithoutProductoInput[]
    upsert?: DetalleVentaUpsertWithWhereUniqueWithoutProductoInput | DetalleVentaUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: DetalleVentaCreateManyProductoInputEnvelope
    set?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    disconnect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    delete?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    update?: DetalleVentaUpdateWithWhereUniqueWithoutProductoInput | DetalleVentaUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: DetalleVentaUpdateManyWithWhereWithoutProductoInput | DetalleVentaUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: DetalleVentaScalarWhereInput | DetalleVentaScalarWhereInput[]
  }

  export type DetalleVentaUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<DetalleVentaCreateWithoutProductoInput, DetalleVentaUncheckedCreateWithoutProductoInput> | DetalleVentaCreateWithoutProductoInput[] | DetalleVentaUncheckedCreateWithoutProductoInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutProductoInput | DetalleVentaCreateOrConnectWithoutProductoInput[]
    upsert?: DetalleVentaUpsertWithWhereUniqueWithoutProductoInput | DetalleVentaUpsertWithWhereUniqueWithoutProductoInput[]
    createMany?: DetalleVentaCreateManyProductoInputEnvelope
    set?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    disconnect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    delete?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    update?: DetalleVentaUpdateWithWhereUniqueWithoutProductoInput | DetalleVentaUpdateWithWhereUniqueWithoutProductoInput[]
    updateMany?: DetalleVentaUpdateManyWithWhereWithoutProductoInput | DetalleVentaUpdateManyWithWhereWithoutProductoInput[]
    deleteMany?: DetalleVentaScalarWhereInput | DetalleVentaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLoginAttemptsInput = {
    create?: XOR<UserCreateWithoutLoginAttemptsInput, UserUncheckedCreateWithoutLoginAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginAttemptsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutLoginAttemptsNestedInput = {
    create?: XOR<UserCreateWithoutLoginAttemptsInput, UserUncheckedCreateWithoutLoginAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLoginAttemptsInput
    upsert?: UserUpsertWithoutLoginAttemptsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLoginAttemptsInput, UserUpdateWithoutLoginAttemptsInput>, UserUncheckedUpdateWithoutLoginAttemptsInput>
  }

  export type VentaCreateNestedOneWithoutVentasDevolucionInput = {
    create?: XOR<VentaCreateWithoutVentasDevolucionInput, VentaUncheckedCreateWithoutVentasDevolucionInput>
    connectOrCreate?: VentaCreateOrConnectWithoutVentasDevolucionInput
    connect?: VentaWhereUniqueInput
  }

  export type VentaCreateNestedManyWithoutVentaRelacionadaInput = {
    create?: XOR<VentaCreateWithoutVentaRelacionadaInput, VentaUncheckedCreateWithoutVentaRelacionadaInput> | VentaCreateWithoutVentaRelacionadaInput[] | VentaUncheckedCreateWithoutVentaRelacionadaInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutVentaRelacionadaInput | VentaCreateOrConnectWithoutVentaRelacionadaInput[]
    createMany?: VentaCreateManyVentaRelacionadaInputEnvelope
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
  }

  export type DatosArriendoCreateNestedOneWithoutVentaInput = {
    create?: XOR<DatosArriendoCreateWithoutVentaInput, DatosArriendoUncheckedCreateWithoutVentaInput>
    connectOrCreate?: DatosArriendoCreateOrConnectWithoutVentaInput
    connect?: DatosArriendoWhereUniqueInput
  }

  export type DetalleVentaCreateNestedManyWithoutVentaInput = {
    create?: XOR<DetalleVentaCreateWithoutVentaInput, DetalleVentaUncheckedCreateWithoutVentaInput> | DetalleVentaCreateWithoutVentaInput[] | DetalleVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutVentaInput | DetalleVentaCreateOrConnectWithoutVentaInput[]
    createMany?: DetalleVentaCreateManyVentaInputEnvelope
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
  }

  export type VentaUncheckedCreateNestedManyWithoutVentaRelacionadaInput = {
    create?: XOR<VentaCreateWithoutVentaRelacionadaInput, VentaUncheckedCreateWithoutVentaRelacionadaInput> | VentaCreateWithoutVentaRelacionadaInput[] | VentaUncheckedCreateWithoutVentaRelacionadaInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutVentaRelacionadaInput | VentaCreateOrConnectWithoutVentaRelacionadaInput[]
    createMany?: VentaCreateManyVentaRelacionadaInputEnvelope
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
  }

  export type DatosArriendoUncheckedCreateNestedOneWithoutVentaInput = {
    create?: XOR<DatosArriendoCreateWithoutVentaInput, DatosArriendoUncheckedCreateWithoutVentaInput>
    connectOrCreate?: DatosArriendoCreateOrConnectWithoutVentaInput
    connect?: DatosArriendoWhereUniqueInput
  }

  export type DetalleVentaUncheckedCreateNestedManyWithoutVentaInput = {
    create?: XOR<DetalleVentaCreateWithoutVentaInput, DetalleVentaUncheckedCreateWithoutVentaInput> | DetalleVentaCreateWithoutVentaInput[] | DetalleVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutVentaInput | DetalleVentaCreateOrConnectWithoutVentaInput[]
    createMany?: DetalleVentaCreateManyVentaInputEnvelope
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VentaUpdateOneWithoutVentasDevolucionNestedInput = {
    create?: XOR<VentaCreateWithoutVentasDevolucionInput, VentaUncheckedCreateWithoutVentasDevolucionInput>
    connectOrCreate?: VentaCreateOrConnectWithoutVentasDevolucionInput
    upsert?: VentaUpsertWithoutVentasDevolucionInput
    disconnect?: VentaWhereInput | boolean
    delete?: VentaWhereInput | boolean
    connect?: VentaWhereUniqueInput
    update?: XOR<XOR<VentaUpdateToOneWithWhereWithoutVentasDevolucionInput, VentaUpdateWithoutVentasDevolucionInput>, VentaUncheckedUpdateWithoutVentasDevolucionInput>
  }

  export type VentaUpdateManyWithoutVentaRelacionadaNestedInput = {
    create?: XOR<VentaCreateWithoutVentaRelacionadaInput, VentaUncheckedCreateWithoutVentaRelacionadaInput> | VentaCreateWithoutVentaRelacionadaInput[] | VentaUncheckedCreateWithoutVentaRelacionadaInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutVentaRelacionadaInput | VentaCreateOrConnectWithoutVentaRelacionadaInput[]
    upsert?: VentaUpsertWithWhereUniqueWithoutVentaRelacionadaInput | VentaUpsertWithWhereUniqueWithoutVentaRelacionadaInput[]
    createMany?: VentaCreateManyVentaRelacionadaInputEnvelope
    set?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    disconnect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    delete?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    update?: VentaUpdateWithWhereUniqueWithoutVentaRelacionadaInput | VentaUpdateWithWhereUniqueWithoutVentaRelacionadaInput[]
    updateMany?: VentaUpdateManyWithWhereWithoutVentaRelacionadaInput | VentaUpdateManyWithWhereWithoutVentaRelacionadaInput[]
    deleteMany?: VentaScalarWhereInput | VentaScalarWhereInput[]
  }

  export type DatosArriendoUpdateOneWithoutVentaNestedInput = {
    create?: XOR<DatosArriendoCreateWithoutVentaInput, DatosArriendoUncheckedCreateWithoutVentaInput>
    connectOrCreate?: DatosArriendoCreateOrConnectWithoutVentaInput
    upsert?: DatosArriendoUpsertWithoutVentaInput
    disconnect?: DatosArriendoWhereInput | boolean
    delete?: DatosArriendoWhereInput | boolean
    connect?: DatosArriendoWhereUniqueInput
    update?: XOR<XOR<DatosArriendoUpdateToOneWithWhereWithoutVentaInput, DatosArriendoUpdateWithoutVentaInput>, DatosArriendoUncheckedUpdateWithoutVentaInput>
  }

  export type DetalleVentaUpdateManyWithoutVentaNestedInput = {
    create?: XOR<DetalleVentaCreateWithoutVentaInput, DetalleVentaUncheckedCreateWithoutVentaInput> | DetalleVentaCreateWithoutVentaInput[] | DetalleVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutVentaInput | DetalleVentaCreateOrConnectWithoutVentaInput[]
    upsert?: DetalleVentaUpsertWithWhereUniqueWithoutVentaInput | DetalleVentaUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: DetalleVentaCreateManyVentaInputEnvelope
    set?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    disconnect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    delete?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    update?: DetalleVentaUpdateWithWhereUniqueWithoutVentaInput | DetalleVentaUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: DetalleVentaUpdateManyWithWhereWithoutVentaInput | DetalleVentaUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: DetalleVentaScalarWhereInput | DetalleVentaScalarWhereInput[]
  }

  export type VentaUncheckedUpdateManyWithoutVentaRelacionadaNestedInput = {
    create?: XOR<VentaCreateWithoutVentaRelacionadaInput, VentaUncheckedCreateWithoutVentaRelacionadaInput> | VentaCreateWithoutVentaRelacionadaInput[] | VentaUncheckedCreateWithoutVentaRelacionadaInput[]
    connectOrCreate?: VentaCreateOrConnectWithoutVentaRelacionadaInput | VentaCreateOrConnectWithoutVentaRelacionadaInput[]
    upsert?: VentaUpsertWithWhereUniqueWithoutVentaRelacionadaInput | VentaUpsertWithWhereUniqueWithoutVentaRelacionadaInput[]
    createMany?: VentaCreateManyVentaRelacionadaInputEnvelope
    set?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    disconnect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    delete?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    connect?: VentaWhereUniqueInput | VentaWhereUniqueInput[]
    update?: VentaUpdateWithWhereUniqueWithoutVentaRelacionadaInput | VentaUpdateWithWhereUniqueWithoutVentaRelacionadaInput[]
    updateMany?: VentaUpdateManyWithWhereWithoutVentaRelacionadaInput | VentaUpdateManyWithWhereWithoutVentaRelacionadaInput[]
    deleteMany?: VentaScalarWhereInput | VentaScalarWhereInput[]
  }

  export type DatosArriendoUncheckedUpdateOneWithoutVentaNestedInput = {
    create?: XOR<DatosArriendoCreateWithoutVentaInput, DatosArriendoUncheckedCreateWithoutVentaInput>
    connectOrCreate?: DatosArriendoCreateOrConnectWithoutVentaInput
    upsert?: DatosArriendoUpsertWithoutVentaInput
    disconnect?: DatosArriendoWhereInput | boolean
    delete?: DatosArriendoWhereInput | boolean
    connect?: DatosArriendoWhereUniqueInput
    update?: XOR<XOR<DatosArriendoUpdateToOneWithWhereWithoutVentaInput, DatosArriendoUpdateWithoutVentaInput>, DatosArriendoUncheckedUpdateWithoutVentaInput>
  }

  export type DetalleVentaUncheckedUpdateManyWithoutVentaNestedInput = {
    create?: XOR<DetalleVentaCreateWithoutVentaInput, DetalleVentaUncheckedCreateWithoutVentaInput> | DetalleVentaCreateWithoutVentaInput[] | DetalleVentaUncheckedCreateWithoutVentaInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutVentaInput | DetalleVentaCreateOrConnectWithoutVentaInput[]
    upsert?: DetalleVentaUpsertWithWhereUniqueWithoutVentaInput | DetalleVentaUpsertWithWhereUniqueWithoutVentaInput[]
    createMany?: DetalleVentaCreateManyVentaInputEnvelope
    set?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    disconnect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    delete?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    update?: DetalleVentaUpdateWithWhereUniqueWithoutVentaInput | DetalleVentaUpdateWithWhereUniqueWithoutVentaInput[]
    updateMany?: DetalleVentaUpdateManyWithWhereWithoutVentaInput | DetalleVentaUpdateManyWithWhereWithoutVentaInput[]
    deleteMany?: DetalleVentaScalarWhereInput | DetalleVentaScalarWhereInput[]
  }

  export type VentaCreateNestedOneWithoutDatosArriendoInput = {
    create?: XOR<VentaCreateWithoutDatosArriendoInput, VentaUncheckedCreateWithoutDatosArriendoInput>
    connectOrCreate?: VentaCreateOrConnectWithoutDatosArriendoInput
    connect?: VentaWhereUniqueInput
  }

  export type VentaUpdateOneRequiredWithoutDatosArriendoNestedInput = {
    create?: XOR<VentaCreateWithoutDatosArriendoInput, VentaUncheckedCreateWithoutDatosArriendoInput>
    connectOrCreate?: VentaCreateOrConnectWithoutDatosArriendoInput
    upsert?: VentaUpsertWithoutDatosArriendoInput
    connect?: VentaWhereUniqueInput
    update?: XOR<XOR<VentaUpdateToOneWithWhereWithoutDatosArriendoInput, VentaUpdateWithoutDatosArriendoInput>, VentaUncheckedUpdateWithoutDatosArriendoInput>
  }

  export type ProductCreateNestedOneWithoutDetalleVentaInput = {
    create?: XOR<ProductCreateWithoutDetalleVentaInput, ProductUncheckedCreateWithoutDetalleVentaInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDetalleVentaInput
    connect?: ProductWhereUniqueInput
  }

  export type VentaCreateNestedOneWithoutDetalleVentaInput = {
    create?: XOR<VentaCreateWithoutDetalleVentaInput, VentaUncheckedCreateWithoutDetalleVentaInput>
    connectOrCreate?: VentaCreateOrConnectWithoutDetalleVentaInput
    connect?: VentaWhereUniqueInput
  }

  export type DetalleVentaCreateNestedOneWithoutDetallesDevolucionesInput = {
    create?: XOR<DetalleVentaCreateWithoutDetallesDevolucionesInput, DetalleVentaUncheckedCreateWithoutDetallesDevolucionesInput>
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutDetallesDevolucionesInput
    connect?: DetalleVentaWhereUniqueInput
  }

  export type DetalleVentaCreateNestedManyWithoutDetalleOriginalInput = {
    create?: XOR<DetalleVentaCreateWithoutDetalleOriginalInput, DetalleVentaUncheckedCreateWithoutDetalleOriginalInput> | DetalleVentaCreateWithoutDetalleOriginalInput[] | DetalleVentaUncheckedCreateWithoutDetalleOriginalInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutDetalleOriginalInput | DetalleVentaCreateOrConnectWithoutDetalleOriginalInput[]
    createMany?: DetalleVentaCreateManyDetalleOriginalInputEnvelope
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
  }

  export type DetalleVentaUncheckedCreateNestedManyWithoutDetalleOriginalInput = {
    create?: XOR<DetalleVentaCreateWithoutDetalleOriginalInput, DetalleVentaUncheckedCreateWithoutDetalleOriginalInput> | DetalleVentaCreateWithoutDetalleOriginalInput[] | DetalleVentaUncheckedCreateWithoutDetalleOriginalInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutDetalleOriginalInput | DetalleVentaCreateOrConnectWithoutDetalleOriginalInput[]
    createMany?: DetalleVentaCreateManyDetalleOriginalInputEnvelope
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUpdateOneRequiredWithoutDetalleVentaNestedInput = {
    create?: XOR<ProductCreateWithoutDetalleVentaInput, ProductUncheckedCreateWithoutDetalleVentaInput>
    connectOrCreate?: ProductCreateOrConnectWithoutDetalleVentaInput
    upsert?: ProductUpsertWithoutDetalleVentaInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutDetalleVentaInput, ProductUpdateWithoutDetalleVentaInput>, ProductUncheckedUpdateWithoutDetalleVentaInput>
  }

  export type VentaUpdateOneRequiredWithoutDetalleVentaNestedInput = {
    create?: XOR<VentaCreateWithoutDetalleVentaInput, VentaUncheckedCreateWithoutDetalleVentaInput>
    connectOrCreate?: VentaCreateOrConnectWithoutDetalleVentaInput
    upsert?: VentaUpsertWithoutDetalleVentaInput
    connect?: VentaWhereUniqueInput
    update?: XOR<XOR<VentaUpdateToOneWithWhereWithoutDetalleVentaInput, VentaUpdateWithoutDetalleVentaInput>, VentaUncheckedUpdateWithoutDetalleVentaInput>
  }

  export type DetalleVentaUpdateOneWithoutDetallesDevolucionesNestedInput = {
    create?: XOR<DetalleVentaCreateWithoutDetallesDevolucionesInput, DetalleVentaUncheckedCreateWithoutDetallesDevolucionesInput>
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutDetallesDevolucionesInput
    upsert?: DetalleVentaUpsertWithoutDetallesDevolucionesInput
    disconnect?: DetalleVentaWhereInput | boolean
    delete?: DetalleVentaWhereInput | boolean
    connect?: DetalleVentaWhereUniqueInput
    update?: XOR<XOR<DetalleVentaUpdateToOneWithWhereWithoutDetallesDevolucionesInput, DetalleVentaUpdateWithoutDetallesDevolucionesInput>, DetalleVentaUncheckedUpdateWithoutDetallesDevolucionesInput>
  }

  export type DetalleVentaUpdateManyWithoutDetalleOriginalNestedInput = {
    create?: XOR<DetalleVentaCreateWithoutDetalleOriginalInput, DetalleVentaUncheckedCreateWithoutDetalleOriginalInput> | DetalleVentaCreateWithoutDetalleOriginalInput[] | DetalleVentaUncheckedCreateWithoutDetalleOriginalInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutDetalleOriginalInput | DetalleVentaCreateOrConnectWithoutDetalleOriginalInput[]
    upsert?: DetalleVentaUpsertWithWhereUniqueWithoutDetalleOriginalInput | DetalleVentaUpsertWithWhereUniqueWithoutDetalleOriginalInput[]
    createMany?: DetalleVentaCreateManyDetalleOriginalInputEnvelope
    set?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    disconnect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    delete?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    update?: DetalleVentaUpdateWithWhereUniqueWithoutDetalleOriginalInput | DetalleVentaUpdateWithWhereUniqueWithoutDetalleOriginalInput[]
    updateMany?: DetalleVentaUpdateManyWithWhereWithoutDetalleOriginalInput | DetalleVentaUpdateManyWithWhereWithoutDetalleOriginalInput[]
    deleteMany?: DetalleVentaScalarWhereInput | DetalleVentaScalarWhereInput[]
  }

  export type DetalleVentaUncheckedUpdateManyWithoutDetalleOriginalNestedInput = {
    create?: XOR<DetalleVentaCreateWithoutDetalleOriginalInput, DetalleVentaUncheckedCreateWithoutDetalleOriginalInput> | DetalleVentaCreateWithoutDetalleOriginalInput[] | DetalleVentaUncheckedCreateWithoutDetalleOriginalInput[]
    connectOrCreate?: DetalleVentaCreateOrConnectWithoutDetalleOriginalInput | DetalleVentaCreateOrConnectWithoutDetalleOriginalInput[]
    upsert?: DetalleVentaUpsertWithWhereUniqueWithoutDetalleOriginalInput | DetalleVentaUpsertWithWhereUniqueWithoutDetalleOriginalInput[]
    createMany?: DetalleVentaCreateManyDetalleOriginalInputEnvelope
    set?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    disconnect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    delete?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    connect?: DetalleVentaWhereUniqueInput | DetalleVentaWhereUniqueInput[]
    update?: DetalleVentaUpdateWithWhereUniqueWithoutDetalleOriginalInput | DetalleVentaUpdateWithWhereUniqueWithoutDetalleOriginalInput[]
    updateMany?: DetalleVentaUpdateManyWithWhereWithoutDetalleOriginalInput | DetalleVentaUpdateManyWithWhereWithoutDetalleOriginalInput[]
    deleteMany?: DetalleVentaScalarWhereInput | DetalleVentaScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type LoginAttemptCreateWithoutUserInput = {
    ip: string
    email: string
    attempts?: number
    blockedUntil?: Date | string | null
    lastAttempt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoginAttemptUncheckedCreateWithoutUserInput = {
    id?: number
    ip: string
    email: string
    attempts?: number
    blockedUntil?: Date | string | null
    lastAttempt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoginAttemptCreateOrConnectWithoutUserInput = {
    where: LoginAttemptWhereUniqueInput
    create: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput>
  }

  export type LoginAttemptCreateManyUserInputEnvelope = {
    data: LoginAttemptCreateManyUserInput | LoginAttemptCreateManyUserInput[]
  }

  export type LoginAttemptUpsertWithWhereUniqueWithoutUserInput = {
    where: LoginAttemptWhereUniqueInput
    update: XOR<LoginAttemptUpdateWithoutUserInput, LoginAttemptUncheckedUpdateWithoutUserInput>
    create: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput>
  }

  export type LoginAttemptUpdateWithWhereUniqueWithoutUserInput = {
    where: LoginAttemptWhereUniqueInput
    data: XOR<LoginAttemptUpdateWithoutUserInput, LoginAttemptUncheckedUpdateWithoutUserInput>
  }

  export type LoginAttemptUpdateManyWithWhereWithoutUserInput = {
    where: LoginAttemptScalarWhereInput
    data: XOR<LoginAttemptUpdateManyMutationInput, LoginAttemptUncheckedUpdateManyWithoutUserInput>
  }

  export type LoginAttemptScalarWhereInput = {
    AND?: LoginAttemptScalarWhereInput | LoginAttemptScalarWhereInput[]
    OR?: LoginAttemptScalarWhereInput[]
    NOT?: LoginAttemptScalarWhereInput | LoginAttemptScalarWhereInput[]
    id?: IntFilter<"LoginAttempt"> | number
    ip?: StringFilter<"LoginAttempt"> | string
    email?: StringFilter<"LoginAttempt"> | string
    attempts?: IntFilter<"LoginAttempt"> | number
    blockedUntil?: DateTimeNullableFilter<"LoginAttempt"> | Date | string | null
    lastAttempt?: DateTimeFilter<"LoginAttempt"> | Date | string
    createdAt?: DateTimeFilter<"LoginAttempt"> | Date | string
    updatedAt?: DateTimeFilter<"LoginAttempt"> | Date | string
    userId?: StringFilter<"LoginAttempt"> | string
  }

  export type DetalleVentaCreateWithoutProductoInput = {
    id?: string
    idDetalle: number
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    venta: VentaCreateNestedOneWithoutDetalleVentaInput
    detalleOriginal?: DetalleVentaCreateNestedOneWithoutDetallesDevolucionesInput
    detallesDevoluciones?: DetalleVentaCreateNestedManyWithoutDetalleOriginalInput
  }

  export type DetalleVentaUncheckedCreateWithoutProductoInput = {
    id?: string
    idDetalle: number
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    ventaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    detalleOriginalId?: string | null
    detallesDevoluciones?: DetalleVentaUncheckedCreateNestedManyWithoutDetalleOriginalInput
  }

  export type DetalleVentaCreateOrConnectWithoutProductoInput = {
    where: DetalleVentaWhereUniqueInput
    create: XOR<DetalleVentaCreateWithoutProductoInput, DetalleVentaUncheckedCreateWithoutProductoInput>
  }

  export type DetalleVentaCreateManyProductoInputEnvelope = {
    data: DetalleVentaCreateManyProductoInput | DetalleVentaCreateManyProductoInput[]
  }

  export type DetalleVentaUpsertWithWhereUniqueWithoutProductoInput = {
    where: DetalleVentaWhereUniqueInput
    update: XOR<DetalleVentaUpdateWithoutProductoInput, DetalleVentaUncheckedUpdateWithoutProductoInput>
    create: XOR<DetalleVentaCreateWithoutProductoInput, DetalleVentaUncheckedCreateWithoutProductoInput>
  }

  export type DetalleVentaUpdateWithWhereUniqueWithoutProductoInput = {
    where: DetalleVentaWhereUniqueInput
    data: XOR<DetalleVentaUpdateWithoutProductoInput, DetalleVentaUncheckedUpdateWithoutProductoInput>
  }

  export type DetalleVentaUpdateManyWithWhereWithoutProductoInput = {
    where: DetalleVentaScalarWhereInput
    data: XOR<DetalleVentaUpdateManyMutationInput, DetalleVentaUncheckedUpdateManyWithoutProductoInput>
  }

  export type DetalleVentaScalarWhereInput = {
    AND?: DetalleVentaScalarWhereInput | DetalleVentaScalarWhereInput[]
    OR?: DetalleVentaScalarWhereInput[]
    NOT?: DetalleVentaScalarWhereInput | DetalleVentaScalarWhereInput[]
    id?: StringFilter<"DetalleVenta"> | string
    idDetalle?: IntFilter<"DetalleVenta"> | number
    idProducto?: StringFilter<"DetalleVenta"> | string
    descripcionProducto?: StringFilter<"DetalleVenta"> | string
    precioUnitario?: FloatFilter<"DetalleVenta"> | number
    cantidad?: IntFilter<"DetalleVenta"> | number
    precioTotal?: FloatFilter<"DetalleVenta"> | number
    cantidadDevuelta?: IntNullableFilter<"DetalleVenta"> | number | null
    estadoProducto?: StringNullableFilter<"DetalleVenta"> | string | null
    observacion?: StringNullableFilter<"DetalleVenta"> | string | null
    ventaId?: StringFilter<"DetalleVenta"> | string
    createdAt?: DateTimeFilter<"DetalleVenta"> | Date | string
    updatedAt?: DateTimeFilter<"DetalleVenta"> | Date | string
    detalleOriginalId?: StringNullableFilter<"DetalleVenta"> | string | null
  }

  export type UserCreateWithoutLoginAttemptsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutLoginAttemptsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutLoginAttemptsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLoginAttemptsInput, UserUncheckedCreateWithoutLoginAttemptsInput>
  }

  export type UserUpsertWithoutLoginAttemptsInput = {
    update: XOR<UserUpdateWithoutLoginAttemptsInput, UserUncheckedUpdateWithoutLoginAttemptsInput>
    create: XOR<UserCreateWithoutLoginAttemptsInput, UserUncheckedCreateWithoutLoginAttemptsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLoginAttemptsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLoginAttemptsInput, UserUncheckedUpdateWithoutLoginAttemptsInput>
  }

  export type UserUpdateWithoutLoginAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutLoginAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VentaCreateWithoutVentasDevolucionInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ventaRelacionada?: VentaCreateNestedOneWithoutVentasDevolucionInput
    datosArriendo?: DatosArriendoCreateNestedOneWithoutVentaInput
    detalleVenta?: DetalleVentaCreateNestedManyWithoutVentaInput
  }

  export type VentaUncheckedCreateWithoutVentasDevolucionInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    idVentaRelacionada?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    datosArriendo?: DatosArriendoUncheckedCreateNestedOneWithoutVentaInput
    detalleVenta?: DetalleVentaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaCreateOrConnectWithoutVentasDevolucionInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutVentasDevolucionInput, VentaUncheckedCreateWithoutVentasDevolucionInput>
  }

  export type VentaCreateWithoutVentaRelacionadaInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ventasDevolucion?: VentaCreateNestedManyWithoutVentaRelacionadaInput
    datosArriendo?: DatosArriendoCreateNestedOneWithoutVentaInput
    detalleVenta?: DetalleVentaCreateNestedManyWithoutVentaInput
  }

  export type VentaUncheckedCreateWithoutVentaRelacionadaInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ventasDevolucion?: VentaUncheckedCreateNestedManyWithoutVentaRelacionadaInput
    datosArriendo?: DatosArriendoUncheckedCreateNestedOneWithoutVentaInput
    detalleVenta?: DetalleVentaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaCreateOrConnectWithoutVentaRelacionadaInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutVentaRelacionadaInput, VentaUncheckedCreateWithoutVentaRelacionadaInput>
  }

  export type VentaCreateManyVentaRelacionadaInputEnvelope = {
    data: VentaCreateManyVentaRelacionadaInput | VentaCreateManyVentaRelacionadaInput[]
  }

  export type DatosArriendoCreateWithoutVentaInput = {
    id?: string
    fechaArriendo: Date | string
    fechaEntrega: Date | string
    patente: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatosArriendoUncheckedCreateWithoutVentaInput = {
    id?: string
    fechaArriendo: Date | string
    fechaEntrega: Date | string
    patente: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DatosArriendoCreateOrConnectWithoutVentaInput = {
    where: DatosArriendoWhereUniqueInput
    create: XOR<DatosArriendoCreateWithoutVentaInput, DatosArriendoUncheckedCreateWithoutVentaInput>
  }

  export type DetalleVentaCreateWithoutVentaInput = {
    id?: string
    idDetalle: number
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    producto: ProductCreateNestedOneWithoutDetalleVentaInput
    detalleOriginal?: DetalleVentaCreateNestedOneWithoutDetallesDevolucionesInput
    detallesDevoluciones?: DetalleVentaCreateNestedManyWithoutDetalleOriginalInput
  }

  export type DetalleVentaUncheckedCreateWithoutVentaInput = {
    id?: string
    idDetalle: number
    idProducto: string
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    detalleOriginalId?: string | null
    detallesDevoluciones?: DetalleVentaUncheckedCreateNestedManyWithoutDetalleOriginalInput
  }

  export type DetalleVentaCreateOrConnectWithoutVentaInput = {
    where: DetalleVentaWhereUniqueInput
    create: XOR<DetalleVentaCreateWithoutVentaInput, DetalleVentaUncheckedCreateWithoutVentaInput>
  }

  export type DetalleVentaCreateManyVentaInputEnvelope = {
    data: DetalleVentaCreateManyVentaInput | DetalleVentaCreateManyVentaInput[]
  }

  export type VentaUpsertWithoutVentasDevolucionInput = {
    update: XOR<VentaUpdateWithoutVentasDevolucionInput, VentaUncheckedUpdateWithoutVentasDevolucionInput>
    create: XOR<VentaCreateWithoutVentasDevolucionInput, VentaUncheckedCreateWithoutVentasDevolucionInput>
    where?: VentaWhereInput
  }

  export type VentaUpdateToOneWithWhereWithoutVentasDevolucionInput = {
    where?: VentaWhereInput
    data: XOR<VentaUpdateWithoutVentasDevolucionInput, VentaUncheckedUpdateWithoutVentasDevolucionInput>
  }

  export type VentaUpdateWithoutVentasDevolucionInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ventaRelacionada?: VentaUpdateOneWithoutVentasDevolucionNestedInput
    datosArriendo?: DatosArriendoUpdateOneWithoutVentaNestedInput
    detalleVenta?: DetalleVentaUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateWithoutVentasDevolucionInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    idVentaRelacionada?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    datosArriendo?: DatosArriendoUncheckedUpdateOneWithoutVentaNestedInput
    detalleVenta?: DetalleVentaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type VentaUpsertWithWhereUniqueWithoutVentaRelacionadaInput = {
    where: VentaWhereUniqueInput
    update: XOR<VentaUpdateWithoutVentaRelacionadaInput, VentaUncheckedUpdateWithoutVentaRelacionadaInput>
    create: XOR<VentaCreateWithoutVentaRelacionadaInput, VentaUncheckedCreateWithoutVentaRelacionadaInput>
  }

  export type VentaUpdateWithWhereUniqueWithoutVentaRelacionadaInput = {
    where: VentaWhereUniqueInput
    data: XOR<VentaUpdateWithoutVentaRelacionadaInput, VentaUncheckedUpdateWithoutVentaRelacionadaInput>
  }

  export type VentaUpdateManyWithWhereWithoutVentaRelacionadaInput = {
    where: VentaScalarWhereInput
    data: XOR<VentaUpdateManyMutationInput, VentaUncheckedUpdateManyWithoutVentaRelacionadaInput>
  }

  export type VentaScalarWhereInput = {
    AND?: VentaScalarWhereInput | VentaScalarWhereInput[]
    OR?: VentaScalarWhereInput[]
    NOT?: VentaScalarWhereInput | VentaScalarWhereInput[]
    id?: StringFilter<"Venta"> | string
    idVenta?: StringFilter<"Venta"> | string
    tipoTransaccion?: StringFilter<"Venta"> | string
    estadoVenta?: StringFilter<"Venta"> | string
    fecha?: DateTimeFilter<"Venta"> | Date | string
    tipoMoneda?: StringFilter<"Venta"> | string
    medioPago?: StringFilter<"Venta"> | string
    total?: FloatFilter<"Venta"> | number
    vuelto?: FloatNullableFilter<"Venta"> | number | null
    idCliente?: StringFilter<"Venta"> | string
    nombreCliente?: StringFilter<"Venta"> | string
    email?: StringFilter<"Venta"> | string
    telefono?: StringFilter<"Venta"> | string
    dni?: StringFilter<"Venta"> | string
    idVendedor?: StringFilter<"Venta"> | string
    idVentaRelacionada?: StringNullableFilter<"Venta"> | string | null
    createdAt?: DateTimeFilter<"Venta"> | Date | string
    updatedAt?: DateTimeFilter<"Venta"> | Date | string
  }

  export type DatosArriendoUpsertWithoutVentaInput = {
    update: XOR<DatosArriendoUpdateWithoutVentaInput, DatosArriendoUncheckedUpdateWithoutVentaInput>
    create: XOR<DatosArriendoCreateWithoutVentaInput, DatosArriendoUncheckedCreateWithoutVentaInput>
    where?: DatosArriendoWhereInput
  }

  export type DatosArriendoUpdateToOneWithWhereWithoutVentaInput = {
    where?: DatosArriendoWhereInput
    data: XOR<DatosArriendoUpdateWithoutVentaInput, DatosArriendoUncheckedUpdateWithoutVentaInput>
  }

  export type DatosArriendoUpdateWithoutVentaInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaArriendo?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    patente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DatosArriendoUncheckedUpdateWithoutVentaInput = {
    id?: StringFieldUpdateOperationsInput | string
    fechaArriendo?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaEntrega?: DateTimeFieldUpdateOperationsInput | Date | string
    patente?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetalleVentaUpsertWithWhereUniqueWithoutVentaInput = {
    where: DetalleVentaWhereUniqueInput
    update: XOR<DetalleVentaUpdateWithoutVentaInput, DetalleVentaUncheckedUpdateWithoutVentaInput>
    create: XOR<DetalleVentaCreateWithoutVentaInput, DetalleVentaUncheckedCreateWithoutVentaInput>
  }

  export type DetalleVentaUpdateWithWhereUniqueWithoutVentaInput = {
    where: DetalleVentaWhereUniqueInput
    data: XOR<DetalleVentaUpdateWithoutVentaInput, DetalleVentaUncheckedUpdateWithoutVentaInput>
  }

  export type DetalleVentaUpdateManyWithWhereWithoutVentaInput = {
    where: DetalleVentaScalarWhereInput
    data: XOR<DetalleVentaUpdateManyMutationInput, DetalleVentaUncheckedUpdateManyWithoutVentaInput>
  }

  export type VentaCreateWithoutDatosArriendoInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ventaRelacionada?: VentaCreateNestedOneWithoutVentasDevolucionInput
    ventasDevolucion?: VentaCreateNestedManyWithoutVentaRelacionadaInput
    detalleVenta?: DetalleVentaCreateNestedManyWithoutVentaInput
  }

  export type VentaUncheckedCreateWithoutDatosArriendoInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    idVentaRelacionada?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ventasDevolucion?: VentaUncheckedCreateNestedManyWithoutVentaRelacionadaInput
    detalleVenta?: DetalleVentaUncheckedCreateNestedManyWithoutVentaInput
  }

  export type VentaCreateOrConnectWithoutDatosArriendoInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutDatosArriendoInput, VentaUncheckedCreateWithoutDatosArriendoInput>
  }

  export type VentaUpsertWithoutDatosArriendoInput = {
    update: XOR<VentaUpdateWithoutDatosArriendoInput, VentaUncheckedUpdateWithoutDatosArriendoInput>
    create: XOR<VentaCreateWithoutDatosArriendoInput, VentaUncheckedCreateWithoutDatosArriendoInput>
    where?: VentaWhereInput
  }

  export type VentaUpdateToOneWithWhereWithoutDatosArriendoInput = {
    where?: VentaWhereInput
    data: XOR<VentaUpdateWithoutDatosArriendoInput, VentaUncheckedUpdateWithoutDatosArriendoInput>
  }

  export type VentaUpdateWithoutDatosArriendoInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ventaRelacionada?: VentaUpdateOneWithoutVentasDevolucionNestedInput
    ventasDevolucion?: VentaUpdateManyWithoutVentaRelacionadaNestedInput
    detalleVenta?: DetalleVentaUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateWithoutDatosArriendoInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    idVentaRelacionada?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ventasDevolucion?: VentaUncheckedUpdateManyWithoutVentaRelacionadaNestedInput
    detalleVenta?: DetalleVentaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type ProductCreateWithoutDetalleVentaInput = {
    id?: string
    name: string
    description: string
    type: string
    priceUSD: number
    priceCLP: number
    priceBRL: number
    stock: number
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductUncheckedCreateWithoutDetalleVentaInput = {
    id?: string
    name: string
    description: string
    type: string
    priceUSD: number
    priceCLP: number
    priceBRL: number
    stock: number
    imageUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductCreateOrConnectWithoutDetalleVentaInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutDetalleVentaInput, ProductUncheckedCreateWithoutDetalleVentaInput>
  }

  export type VentaCreateWithoutDetalleVentaInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ventaRelacionada?: VentaCreateNestedOneWithoutVentasDevolucionInput
    ventasDevolucion?: VentaCreateNestedManyWithoutVentaRelacionadaInput
    datosArriendo?: DatosArriendoCreateNestedOneWithoutVentaInput
  }

  export type VentaUncheckedCreateWithoutDetalleVentaInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    idVentaRelacionada?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ventasDevolucion?: VentaUncheckedCreateNestedManyWithoutVentaRelacionadaInput
    datosArriendo?: DatosArriendoUncheckedCreateNestedOneWithoutVentaInput
  }

  export type VentaCreateOrConnectWithoutDetalleVentaInput = {
    where: VentaWhereUniqueInput
    create: XOR<VentaCreateWithoutDetalleVentaInput, VentaUncheckedCreateWithoutDetalleVentaInput>
  }

  export type DetalleVentaCreateWithoutDetallesDevolucionesInput = {
    id?: string
    idDetalle: number
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    producto: ProductCreateNestedOneWithoutDetalleVentaInput
    venta: VentaCreateNestedOneWithoutDetalleVentaInput
    detalleOriginal?: DetalleVentaCreateNestedOneWithoutDetallesDevolucionesInput
  }

  export type DetalleVentaUncheckedCreateWithoutDetallesDevolucionesInput = {
    id?: string
    idDetalle: number
    idProducto: string
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    ventaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    detalleOriginalId?: string | null
  }

  export type DetalleVentaCreateOrConnectWithoutDetallesDevolucionesInput = {
    where: DetalleVentaWhereUniqueInput
    create: XOR<DetalleVentaCreateWithoutDetallesDevolucionesInput, DetalleVentaUncheckedCreateWithoutDetallesDevolucionesInput>
  }

  export type DetalleVentaCreateWithoutDetalleOriginalInput = {
    id?: string
    idDetalle: number
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    producto: ProductCreateNestedOneWithoutDetalleVentaInput
    venta: VentaCreateNestedOneWithoutDetalleVentaInput
    detallesDevoluciones?: DetalleVentaCreateNestedManyWithoutDetalleOriginalInput
  }

  export type DetalleVentaUncheckedCreateWithoutDetalleOriginalInput = {
    id?: string
    idDetalle: number
    idProducto: string
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    ventaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    detallesDevoluciones?: DetalleVentaUncheckedCreateNestedManyWithoutDetalleOriginalInput
  }

  export type DetalleVentaCreateOrConnectWithoutDetalleOriginalInput = {
    where: DetalleVentaWhereUniqueInput
    create: XOR<DetalleVentaCreateWithoutDetalleOriginalInput, DetalleVentaUncheckedCreateWithoutDetalleOriginalInput>
  }

  export type DetalleVentaCreateManyDetalleOriginalInputEnvelope = {
    data: DetalleVentaCreateManyDetalleOriginalInput | DetalleVentaCreateManyDetalleOriginalInput[]
  }

  export type ProductUpsertWithoutDetalleVentaInput = {
    update: XOR<ProductUpdateWithoutDetalleVentaInput, ProductUncheckedUpdateWithoutDetalleVentaInput>
    create: XOR<ProductCreateWithoutDetalleVentaInput, ProductUncheckedCreateWithoutDetalleVentaInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutDetalleVentaInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutDetalleVentaInput, ProductUncheckedUpdateWithoutDetalleVentaInput>
  }

  export type ProductUpdateWithoutDetalleVentaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priceUSD?: FloatFieldUpdateOperationsInput | number
    priceCLP?: FloatFieldUpdateOperationsInput | number
    priceBRL?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateWithoutDetalleVentaInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    priceUSD?: FloatFieldUpdateOperationsInput | number
    priceCLP?: FloatFieldUpdateOperationsInput | number
    priceBRL?: FloatFieldUpdateOperationsInput | number
    stock?: IntFieldUpdateOperationsInput | number
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VentaUpsertWithoutDetalleVentaInput = {
    update: XOR<VentaUpdateWithoutDetalleVentaInput, VentaUncheckedUpdateWithoutDetalleVentaInput>
    create: XOR<VentaCreateWithoutDetalleVentaInput, VentaUncheckedCreateWithoutDetalleVentaInput>
    where?: VentaWhereInput
  }

  export type VentaUpdateToOneWithWhereWithoutDetalleVentaInput = {
    where?: VentaWhereInput
    data: XOR<VentaUpdateWithoutDetalleVentaInput, VentaUncheckedUpdateWithoutDetalleVentaInput>
  }

  export type VentaUpdateWithoutDetalleVentaInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ventaRelacionada?: VentaUpdateOneWithoutVentasDevolucionNestedInput
    ventasDevolucion?: VentaUpdateManyWithoutVentaRelacionadaNestedInput
    datosArriendo?: DatosArriendoUpdateOneWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateWithoutDetalleVentaInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    idVentaRelacionada?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ventasDevolucion?: VentaUncheckedUpdateManyWithoutVentaRelacionadaNestedInput
    datosArriendo?: DatosArriendoUncheckedUpdateOneWithoutVentaNestedInput
  }

  export type DetalleVentaUpsertWithoutDetallesDevolucionesInput = {
    update: XOR<DetalleVentaUpdateWithoutDetallesDevolucionesInput, DetalleVentaUncheckedUpdateWithoutDetallesDevolucionesInput>
    create: XOR<DetalleVentaCreateWithoutDetallesDevolucionesInput, DetalleVentaUncheckedCreateWithoutDetallesDevolucionesInput>
    where?: DetalleVentaWhereInput
  }

  export type DetalleVentaUpdateToOneWithWhereWithoutDetallesDevolucionesInput = {
    where?: DetalleVentaWhereInput
    data: XOR<DetalleVentaUpdateWithoutDetallesDevolucionesInput, DetalleVentaUncheckedUpdateWithoutDetallesDevolucionesInput>
  }

  export type DetalleVentaUpdateWithoutDetallesDevolucionesInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    producto?: ProductUpdateOneRequiredWithoutDetalleVentaNestedInput
    venta?: VentaUpdateOneRequiredWithoutDetalleVentaNestedInput
    detalleOriginal?: DetalleVentaUpdateOneWithoutDetallesDevolucionesNestedInput
  }

  export type DetalleVentaUncheckedUpdateWithoutDetallesDevolucionesInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    idProducto?: StringFieldUpdateOperationsInput | string
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detalleOriginalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DetalleVentaUpsertWithWhereUniqueWithoutDetalleOriginalInput = {
    where: DetalleVentaWhereUniqueInput
    update: XOR<DetalleVentaUpdateWithoutDetalleOriginalInput, DetalleVentaUncheckedUpdateWithoutDetalleOriginalInput>
    create: XOR<DetalleVentaCreateWithoutDetalleOriginalInput, DetalleVentaUncheckedCreateWithoutDetalleOriginalInput>
  }

  export type DetalleVentaUpdateWithWhereUniqueWithoutDetalleOriginalInput = {
    where: DetalleVentaWhereUniqueInput
    data: XOR<DetalleVentaUpdateWithoutDetalleOriginalInput, DetalleVentaUncheckedUpdateWithoutDetalleOriginalInput>
  }

  export type DetalleVentaUpdateManyWithWhereWithoutDetalleOriginalInput = {
    where: DetalleVentaScalarWhereInput
    data: XOR<DetalleVentaUpdateManyMutationInput, DetalleVentaUncheckedUpdateManyWithoutDetalleOriginalInput>
  }

  export type LoginAttemptCreateManyUserInput = {
    ip: string
    email: string
    attempts?: number
    blockedUntil?: Date | string | null
    lastAttempt?: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoginAttemptUpdateWithoutUserInput = {
    ip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    blockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginAttemptUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    blockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoginAttemptUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    attempts?: IntFieldUpdateOperationsInput | number
    blockedUntil?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    lastAttempt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetalleVentaCreateManyProductoInput = {
    id?: string
    idDetalle: number
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    ventaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    detalleOriginalId?: string | null
  }

  export type DetalleVentaUpdateWithoutProductoInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venta?: VentaUpdateOneRequiredWithoutDetalleVentaNestedInput
    detalleOriginal?: DetalleVentaUpdateOneWithoutDetallesDevolucionesNestedInput
    detallesDevoluciones?: DetalleVentaUpdateManyWithoutDetalleOriginalNestedInput
  }

  export type DetalleVentaUncheckedUpdateWithoutProductoInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detalleOriginalId?: NullableStringFieldUpdateOperationsInput | string | null
    detallesDevoluciones?: DetalleVentaUncheckedUpdateManyWithoutDetalleOriginalNestedInput
  }

  export type DetalleVentaUncheckedUpdateManyWithoutProductoInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detalleOriginalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VentaCreateManyVentaRelacionadaInput = {
    id?: string
    idVenta: string
    tipoTransaccion: string
    estadoVenta: string
    fecha: Date | string
    tipoMoneda: string
    medioPago: string
    total: number
    vuelto?: number | null
    idCliente: string
    nombreCliente: string
    email: string
    telefono: string
    dni: string
    idVendedor: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DetalleVentaCreateManyVentaInput = {
    id?: string
    idDetalle: number
    idProducto: string
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    detalleOriginalId?: string | null
  }

  export type VentaUpdateWithoutVentaRelacionadaInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ventasDevolucion?: VentaUpdateManyWithoutVentaRelacionadaNestedInput
    datosArriendo?: DatosArriendoUpdateOneWithoutVentaNestedInput
    detalleVenta?: DetalleVentaUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateWithoutVentaRelacionadaInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ventasDevolucion?: VentaUncheckedUpdateManyWithoutVentaRelacionadaNestedInput
    datosArriendo?: DatosArriendoUncheckedUpdateOneWithoutVentaNestedInput
    detalleVenta?: DetalleVentaUncheckedUpdateManyWithoutVentaNestedInput
  }

  export type VentaUncheckedUpdateManyWithoutVentaRelacionadaInput = {
    id?: StringFieldUpdateOperationsInput | string
    idVenta?: StringFieldUpdateOperationsInput | string
    tipoTransaccion?: StringFieldUpdateOperationsInput | string
    estadoVenta?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    tipoMoneda?: StringFieldUpdateOperationsInput | string
    medioPago?: StringFieldUpdateOperationsInput | string
    total?: FloatFieldUpdateOperationsInput | number
    vuelto?: NullableFloatFieldUpdateOperationsInput | number | null
    idCliente?: StringFieldUpdateOperationsInput | string
    nombreCliente?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telefono?: StringFieldUpdateOperationsInput | string
    dni?: StringFieldUpdateOperationsInput | string
    idVendedor?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DetalleVentaUpdateWithoutVentaInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    producto?: ProductUpdateOneRequiredWithoutDetalleVentaNestedInput
    detalleOriginal?: DetalleVentaUpdateOneWithoutDetallesDevolucionesNestedInput
    detallesDevoluciones?: DetalleVentaUpdateManyWithoutDetalleOriginalNestedInput
  }

  export type DetalleVentaUncheckedUpdateWithoutVentaInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    idProducto?: StringFieldUpdateOperationsInput | string
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detalleOriginalId?: NullableStringFieldUpdateOperationsInput | string | null
    detallesDevoluciones?: DetalleVentaUncheckedUpdateManyWithoutDetalleOriginalNestedInput
  }

  export type DetalleVentaUncheckedUpdateManyWithoutVentaInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    idProducto?: StringFieldUpdateOperationsInput | string
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detalleOriginalId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DetalleVentaCreateManyDetalleOriginalInput = {
    id?: string
    idDetalle: number
    idProducto: string
    descripcionProducto: string
    precioUnitario: number
    cantidad: number
    precioTotal: number
    cantidadDevuelta?: number | null
    estadoProducto?: string | null
    observacion?: string | null
    ventaId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DetalleVentaUpdateWithoutDetalleOriginalInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    producto?: ProductUpdateOneRequiredWithoutDetalleVentaNestedInput
    venta?: VentaUpdateOneRequiredWithoutDetalleVentaNestedInput
    detallesDevoluciones?: DetalleVentaUpdateManyWithoutDetalleOriginalNestedInput
  }

  export type DetalleVentaUncheckedUpdateWithoutDetalleOriginalInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    idProducto?: StringFieldUpdateOperationsInput | string
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    detallesDevoluciones?: DetalleVentaUncheckedUpdateManyWithoutDetalleOriginalNestedInput
  }

  export type DetalleVentaUncheckedUpdateManyWithoutDetalleOriginalInput = {
    id?: StringFieldUpdateOperationsInput | string
    idDetalle?: IntFieldUpdateOperationsInput | number
    idProducto?: StringFieldUpdateOperationsInput | string
    descripcionProducto?: StringFieldUpdateOperationsInput | string
    precioUnitario?: FloatFieldUpdateOperationsInput | number
    cantidad?: IntFieldUpdateOperationsInput | number
    precioTotal?: FloatFieldUpdateOperationsInput | number
    cantidadDevuelta?: NullableIntFieldUpdateOperationsInput | number | null
    estadoProducto?: NullableStringFieldUpdateOperationsInput | string | null
    observacion?: NullableStringFieldUpdateOperationsInput | string | null
    ventaId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VentaCountOutputTypeDefaultArgs instead
     */
    export type VentaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VentaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DetalleVentaCountOutputTypeDefaultArgs instead
     */
    export type DetalleVentaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DetalleVentaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LoginAttemptDefaultArgs instead
     */
    export type LoginAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LoginAttemptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VentaDefaultArgs instead
     */
    export type VentaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VentaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DatosArriendoDefaultArgs instead
     */
    export type DatosArriendoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DatosArriendoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DetalleVentaDefaultArgs instead
     */
    export type DetalleVentaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DetalleVentaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}